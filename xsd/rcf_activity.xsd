<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xs="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">
   <xs:element name="activity" type="activityWithGUID">
		<!--
			unique constraints at activity level

			Any changes here will have to be duplicated in the rcf_activityset.xsd file as well - because there is no
			way to 'share' xs:unique restrictions between elements / define them in a base type :(

		-->
		    <xs:unique name="sectionActivityIDUnique">
			      <xs:selector xpath="."/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="sectionBlockIDUnique">
			      <xs:selector xpath="block"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="dropDownIDUnique">
			      <xs:selector xpath=".//dropDown"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="typeInIDUnique">
			      <xs:selector xpath=".//typein"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="textInputIDUnique">
			      <xs:selector xpath=".//textInput"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="typeinGroupIDUnique">
			      <xs:selector xpath=".//typeinGroup"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="typeinGroupTypeinIDUnique">
			      <xs:selector xpath=".//typeinGroup/typein"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="mlTextInputIDUnique">
			      <xs:selector xpath=".//mlTextInput"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="mlTypeInIDUnique">
			      <xs:selector xpath=".//mlTypein"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="radioIDUnique">
			      <xs:selector xpath=".//radio"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="checkboxIDUnique">
			      <xs:selector xpath=".//checkbox"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="droppableIDUnique">
			      <xs:selector xpath=".//droppable"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="droppableRankUnique">
			      <xs:selector xpath=".//droppable"/>
			      <xs:field xpath="@rank"/>
		    </xs:unique>
		    <xs:unique name="complexDroppableIDUnique">
			      <xs:selector xpath=".//complexDroppable"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="categoriseIDUnique">
			      <xs:selector xpath=".//categorise"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <!-- devbliss fix / hack -->
		    <xs:unique name="categoriseCategoryIDUnique">
			      <xs:selector xpath=".//categorise/category"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <!-- devbliss fix / hack (End) -->
		    <xs:unique name="complexCategoriseIDUnique">
			      <xs:selector xpath=".//complexCategorise"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="positioningIDUnique">
			      <xs:selector xpath=".//positioning"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="orderingIDUnique">
			      <xs:selector xpath=".//ordering"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="inlineOrderingIDUnique">
			      <xs:selector xpath=".//inlineOrdering"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="complexOrderingIDUnique">
			      <xs:selector xpath=".//complexOrdering"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="locatingIDUnique">
			      <xs:selector xpath=".//locating"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="interactiveTextBlockIDUnique">
			      <xs:selector xpath=".//interactiveTextBlock"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="wordSnakeIDUnique">
			      <xs:selector xpath=".//wordSnake"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="wordSearchIDUnique">
			      <xs:selector xpath=".//wordSearch"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="fixedWordSearchIDUnique">
			      <xs:selector xpath=".//fixedWordSearch"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="crosswordIDUnique">
			      <xs:selector xpath=".//crossword"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="fixedCrosswordIDUnique">
			      <xs:selector xpath=".//fixedCrossword"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="matchingIDUnique">
			      <xs:selector xpath=".//matching"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="complexMatchingIDUnique">
			      <xs:selector xpath=".//complexMatching"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="pelmanismIDUnique">
			      <xs:selector xpath=".//pelmanism"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="verticalCrosswordUnique">
			      <xs:selector xpath=".//verticalCrossword"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="flashCardIDUnique">
			      <xs:selector xpath=".//flashcard"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="recordingIDUnique">
			      <xs:selector xpath=".//recording"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="writingIDUnique">
			      <xs:selector xpath=".//writing"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="answerKeyIDUnique">
			      <xs:selector xpath=".//answerKey"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="sentenceBuilderIDUnique">
			      <xs:selector xpath=".//sentenceBuilder"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="wordInsertIDUnique">
			      <xs:selector xpath=".//wordInsert"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="sequenceTileMazeIdUnique">
			      <xs:selector xpath=".//sequenceTileMaze"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="categoriseTileMazeIdUnique">
			      <xs:selector xpath=".//categoriseTileMaze"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="spellingBeeIdUnique">
			      <xs:selector xpath=".//spellingBee"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="highlightingTextBlockIdUnique">
			      <xs:selector xpath=".//highlightingTextBlock"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="mathsAdditionIdUnique">
			      <xs:selector xpath=".//mathsAddition"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="mathsSubtractionIdUnique">
			      <xs:selector xpath=".//mathsSubtraction"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="mathsMultiplicationIdUnique">
			      <xs:selector xpath=".//mathsMultiplication"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="mathsDivisionIdUnique">
			      <xs:selector xpath=".//mathsDivision"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="freeDrawingIdUnique">
			      <xs:selector xpath=".//freeDrawing"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="presentationReferenceLinkIdUnique">
			      <xs:selector xpath=".//presentation"/>
			      <xs:field xpath="@referenceId"/>
		    </xs:unique>

		    <xs:unique name="collapsibleBlockIdUnique">
			      <xs:selector xpath=".//collapsibleBlock"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="popupLink" type="popupLinkType"/>
   <xs:element name="itemBased" type="itemBasedType">
		    <xs:unique name="itemSetTypeUnique">
			      <xs:selector xpath=".//itemSet"/>
			      <xs:field xpath="@type"/>
		    </xs:unique>
		    <xs:unique name="itemBasedItemIDUnique">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="coverScreen" type="coverScreenType">

	</xs:element>
   <xs:element name="distractors">
		    <xs:annotation>
			      <xs:documentation>'distractors' at a top level (below 'main') are added to a
				activity-level word pool</xs:documentation>
		    </xs:annotation>
		    <xs:complexType>
			      <xs:sequence>
				        <xs:element name="item"
                        type="multiMediaItemRankedType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
			      </xs:sequence>
		    </xs:complexType>
		    <xs:unique name="distractorsItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="main" type="mainType"/>
   <xs:element name="answerKey" type="answerKeyType">
		    <xs:unique name="answerKeyItemIDUnique">
			      <xs:selector xpath=".//*"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="canDo" type="canDoType"/>
   <xs:element name="carousel" type="carouselBlockType"/>
   <xs:element name="simpleCarousel" type="simpleCarouselBlockType"/>
   <xs:element name="categorise" type="categoriseType">
		    <xs:unique name="categoryIDUnique">
			      <xs:selector xpath="category"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="categoryItemIDUnique">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="categoryItemRankUnique">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@rank"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="complexCategorise" type="complexCategoriseType">
		    <xs:unique name="complexCategoriseCategoryIdUnique">
			      <xs:selector xpath="categories/category"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:key name="categoryItemID">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
		    <xs:keyref name="categoryAnswerID" refer="categoryItemID">
			      <xs:selector xpath="categories/category/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>
	  </xs:element>
   <xs:element name="chase" type="chaseType"/>
   <xs:element name="checkbox" type="checkboxListType">
		    <xs:unique name="checkboxItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="complexDroppableBlock" type="complexDroppableBlockType">
		    <xs:key name="complexDroppableID">
			      <xs:selector xpath=".//complexDroppables/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
		    <xs:keyref name="complexDroppableIDRef" refer="complexDroppableID">
			      <xs:selector xpath=".//complexDroppable/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>
	  </xs:element>
   <xs:element name="complexDroppable">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="rcfMarkedInteractionWithExample">
					          <xs:sequence maxOccurs="unbounded">
						            <xs:element name="prefix" type="xs:string" minOccurs="0"/>
						            <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
							              <xs:complexType>
								                <xs:attribute name="id" type="xs:string" use="required"/>
							              </xs:complexType>
						            </xs:element>
						            <xs:element name="suffix" type="xs:string" minOccurs="0"/>
					          </xs:sequence>
					          <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="crossword" type="crosswordType">
		    <xs:unique name="crosswordWordIDUnique">
			      <xs:selector xpath=".//word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="fixedCrossword" type="fixedCrosswordType">
		    <xs:unique name="fixedCrosswordWordIDUnique">
			      <xs:selector xpath="words/word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="droppable" type="droppableType"/>
   <xs:element name="eSpan" type="eSpanType"/>
   <xs:element name="flashcard" type="flashcardType">
		    <xs:unique name="flashCardDefinitionIDUnique">
			      <xs:selector xpath="definitions/item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="flashCardCardIDUnique">
			      <xs:selector xpath="cards/card"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:key name="descriptorKey">
			      <xs:selector xpath="descriptors/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
		    <xs:keyref name="definitionItemKeyRef" refer="descriptorKey">
			      <xs:selector xpath="cards/card/definitions/item"/>
			      <xs:field xpath="@refID"/>
		    </xs:keyref>
	  </xs:element>
   <xs:element name="blendedFlashcards" type="blendedFlashcardsType">
		    <xs:unique name="blendedFlashcardsCardIDUnique">
			      <xs:selector xpath=".//card"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="hangman" type="hangmanType">
		    <xs:unique name="hangmanWordIDUnique">
			      <xs:selector xpath=".//word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="imageSet" type="imageSetType"/>
   <xs:element name="interactiveImageSet" type="interactiveImageSetType"/>
   <xs:element name="interactiveTextBlock" type="interactiveTextType">
		    <xs:unique name="itb-eSpanIDUnique">
			      <xs:selector xpath=".//eSpan"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="itb-eDivIDUnique">
			      <xs:selector xpath=".//eDiv"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="locating" type="locatingType"/>
   <xs:element name="matching" type="matchingType">
		    <xs:unique name="matchingMatcherUniqueIDs">
			      <xs:selector xpath="./pair/matchItem"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="matchingMatcheeUniqueIDs">
			      <xs:selector xpath="./pair/matchTarget"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="complexMatching" type="complexMatchingType">
		    <xs:unique name="complexMatchItemsUniqueIDs">
			      <xs:selector xpath="./matchItems/matchItem"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="complexMatchTargetItemsUniqueIDs">
			      <xs:selector xpath="./matchTargets/matchTarget"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="audio" type="simpleAudioType"/>
   <xs:element name="video" type="complexVideoType"/>
   <xs:element name="image" type="simpleImageType"/>
   <xs:element name="imageAudio" type="imageAudioType"/>
   <xs:element name="ordering" type="orderingType">
		    <xs:unique name="orderingItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="orderRankUnique">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@rank"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="inlineOrdering" type="inlineOrderingType">
		    <xs:unique name="inlineOrderingItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="inlineOrderRankUnique">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@rank"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="complexOrdering" type="complexOrderingType">
		    <xs:unique name="complexOrderingItemsRankUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@rank"/>
		    </xs:unique>
		    <xs:unique name="complexOrderingItemsIDUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="pelmanism" type="pelmanismType">
		<!-- setup unique constraints -->
		    <xs:unique name="pelmanismCardRankUnique">
			      <xs:selector xpath=".//card"/>
			      <xs:field xpath="@rank"/>
		    </xs:unique>
		    <xs:unique name="pelmanismPairClassUnique">
			      <xs:selector xpath=".//pair"/>
			      <xs:field xpath="@class"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="positioning" type="positioningType">
		    <xs:unique name="positioningItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="radio" type="radioListType">
		    <xs:unique name="radioItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="dropDown" type="dropdownType">
		    <xs:unique name="dropDownItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="mlTypein" type="multiLineTypeInType"/>
   <xs:element name="textInput" type="unmarkedTextInputType"/>
   <xs:element name="mlTextInput" type="unmarkedMultiLineTextInputType"/>
   <xs:element name="typeinGroup" type="typeinGroupType">
		    <xs:unique name="typeInGroupIDUnique">
			      <xs:selector xpath=".//typein"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="verticalCrossword" type="verticalCrosswordType">
		    <xs:unique name="verticalCrosswordWordIDUnique">
			      <xs:selector xpath=".//word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="clueWordIdUnique">
			      <xs:selector xpath=".//clue"/>
			      <xs:field xpath="@wordId"/>
		    </xs:unique>

		    <xs:key name="wordKey">
			      <xs:selector xpath=".//word"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
		    <xs:keyref name="clueWordIdRef" refer="wordKey">
			      <xs:selector xpath=".//clue"/>
			      <xs:field xpath="@wordId"/>
		    </xs:keyref>
	  </xs:element>
   <xs:element name="wordSnake" type="wordSnakeType">
		    <xs:unique name="wordSnakeWordIDUnique">
			      <xs:selector xpath=".//word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="movingTargets" type="movingTargetsType">
		    <xs:unique name="targetIDUnique">
			      <xs:selector xpath="targets/target"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="targetImageUnique">
			      <xs:selector xpath="targets/target"/>
			      <xs:field xpath="@image"/>
		    </xs:unique>
		    <xs:unique name="targetAudioUnique">
			      <xs:selector xpath="targets/target"/>
			      <xs:field xpath="@audio"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="compositeScene" type="compositeSceneType">
		    <xs:unique name="compositeItemIDUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="compositeItemAudioUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@audioClue"/>
		    </xs:unique>
		    <xs:unique name="compositeItemImageUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@image"/>
		    </xs:unique>
		    <xs:unique name="compositeItemCorrectAudioUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@correctAudio"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="colouring" type="colouringType">
		    <xs:key name="colourItemID">
			      <xs:selector xpath="./colours/colour"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
		    <xs:keyref name="correctColourID" refer="colourItemID">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@correctColour"/>
		    </xs:keyref>
		    <xs:unique name="colouringColourIDUnique">
			      <xs:selector xpath="colours/colour"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="colouringColourImageUnique">
			      <xs:selector xpath="colours/colour"/>
			      <xs:field xpath="@image"/>
		    </xs:unique>
		    <xs:unique name="colouringItemIDUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="colouringItemColourImageUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@colourImage"/>
		    </xs:unique>
		    <xs:unique name="colouringItemImageUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@image"/>
		    </xs:unique>
		    <xs:unique name="colouringItemCorrectImageUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@correctImage"/>
		    </xs:unique>
		    <xs:unique name="colouringItemAudioUnique">
			      <xs:selector xpath="items/item"/>
			      <xs:field xpath="@audioClue"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="listenAndColour" type="listenAndColourType">

		    <xs:key name="colourPaletteName">
			      <xs:selector xpath="./colourPalette/colour"/>
			      <xs:field xpath="@name"/>
		    </xs:key>

		    <xs:keyref name="correctColourName" refer="colourPaletteName">
			      <xs:selector xpath="itemGroups/items"/>
			      <xs:field xpath="@correctColour"/>
		    </xs:keyref>

		    <xs:unique name="uniqueColourName">
			      <xs:selector xpath="colourPalette/colour"/>
			      <xs:field xpath="@name"/>
		    </xs:unique>

		    <xs:unique name="uniqueItemsColourName">
			      <xs:selector xpath="itemGroups/items"/>
			      <xs:field xpath="@correctColour"/>
		    </xs:unique>

		    <xs:unique name="uniqueSvgItemName">
			      <xs:selector xpath="itemGroups/items/item"/>
			      <xs:field xpath="@name"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="balloonsGame" type="balloonsGameType">
		    <xs:key name="balloonsGameItemsKey">
			      <xs:selector xpath="./items/item | ./distractors/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:key name="correctAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:keyref name="balloonsGameItemsCorrectItemKey"
                 refer="correctAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./questions/question/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>

		    <xs:unique name="balloonsGameQuestionIdUnique">
			      <xs:selector xpath=".//questions/question"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>


	  </xs:element>
   <xs:element name="writing" type="feedbackWritingType"/>
   <xs:element name="wordSearch" type="wordSearchType">
		    <xs:unique name="wordSearchWordIDUnique">
			      <xs:selector xpath="words/word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="fixedWordSearch" type="fixedWordSearchType">
		    <xs:unique name="fixedWordSearchWordIDUnique">
			      <xs:selector xpath="words/word"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="story">
		    <xs:annotation>
			      <xs:documentation>Definition for the PBF story element which defines a set of scenes which can be played in an RCF activity</xs:documentation>
		    </xs:annotation>

		    <xs:complexType>
			      <xs:sequence>
				        <xs:element name="speakersList"
                        type="speakersListType"
                        maxOccurs="1"
                        minOccurs="0">
					<!-- ensure speaker/@id is unique in speakersList -->
					          <xs:unique name="uniqueSpeakerIdInSpeakerList">
						            <xs:selector xpath="speaker"/>
						            <xs:field xpath="@id"/>
					          </xs:unique>
				        </xs:element>
				        <xs:element name="cover" type="coverType" maxOccurs="1" minOccurs="1"/>
				        <xs:element name="scene"
                        type="sceneType"
                        maxOccurs="unbounded"
                        minOccurs="1">
					          <xs:unique name="uniqueSpeechIdInTheScene">
						            <xs:selector xpath="speech"/>
						            <xs:field xpath="@id"/>
					          </xs:unique>
				        </xs:element>
			      </xs:sequence>
			      <xs:attribute name="class" type="userClassPattern" use="optional"/>

		    </xs:complexType>

		    <!-- ensure that scene/@id is unique in story -->
		    <xs:unique name="storySceneIdUnique">
			      <xs:selector xpath="./scene"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <!-- create lookup key for <speech ... speakerId=...> -->
		    <xs:key name="storySpeakerKey">
			      <xs:selector xpath="./speakersList/speaker"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <!-- enforce the key rule -->
		    <xs:keyref name="storySpeakerSpeechKeyRef" refer="storySpeakerKey">
			      <xs:selector xpath="./scene/speech"/>
			      <xs:field xpath="@speakerId"/>
		    </xs:keyref>

	  </xs:element>
   <xs:element name="sentenceBuilder" type="sentenceBuilderType">
		    <xs:unique name="itemsUniqueIds">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="wordInsert" type="wordInsertType">
		    <xs:unique name="wordInsertItemsUniqueIds">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="findInImage" type="findInImageType">

		    <xs:key name="findInImageItemsKey">
			      <xs:selector xpath="./items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:keyref name="findInImageCorrectItemKey" refer="findInImageItemsKey">
			      <xs:selector xpath="./questions/question/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>

		    <xs:unique name="findInImageItemIds">
			      <xs:selector xpath=".//items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="findInImageQuestionIds">
			      <xs:selector xpath=".//questions/question"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:element name="sequenceTileMaze" type="sequenceTileMazeType"/>
   <xs:element name="categoriseTileMaze" type="categoriseTileMazeType"/>
   <xs:element name="spellingBee" type="spellingBeeType"/>
   <xs:element name="teacherGradedTask" type="feedbackTeacherGradedTaskType"/>
   <xs:element name="bubblesGame">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="fiabBubblesGameType">
					          <xs:attribute name="skin" use="optional">
						            <xs:simpleType>
							              <xs:restriction base="xs:string">
								                <xs:enumeration value="bubbles"/>
								                <xs:enumeration value="space"/>
							              </xs:restriction>
						            </xs:simpleType>
					          </xs:attribute>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>

		    <xs:key name="bubblesGameItemsKey">
			      <xs:selector xpath="./items/item | ./distractors/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:key name="bubblesGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:keyref name="bubblesGameItemsCorrectItemKey"
                 refer="bubblesGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./questions/question/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>

		    <xs:unique name="bubblesGameQuestionIdUnique">
			      <xs:selector xpath=".//questions/question"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:element name="barrelsGame" type="fiabBubblesGameType">
		    <xs:key name="barrelsGameItemsKey">
			      <xs:selector xpath="./items/item | ./distractors/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:key name="barrelsGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:keyref name="barrelsGameItemsCorrectItemKey"
                 refer="barrelsGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./questions/question/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>

		    <xs:unique name="barrelsGameQuestionIdUnique">
			      <xs:selector xpath=".//questions/question"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:element name="snapGame" type="fiabSnapGameType">
		    <xs:key name="snapGameItemsKeyUnique">
			      <xs:selector xpath="./cards/pair/item | ./distractors/items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:key name="snapGameTargetsKeyUnique">
			      <xs:selector xpath="./cards/pair/target | ./distractors/targets/target"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

	  </xs:element>
   <xs:element name="whackaMoleGame">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="fiabBubblesGameType">
					          <xs:attribute name="skin" use="optional">
						            <xs:simpleType>
							              <xs:restriction base="xs:string">
								                <xs:enumeration value="bubbles"/>
								                <xs:enumeration value="river"/>
								                <xs:enumeration value="space"/>
							              </xs:restriction>
						            </xs:simpleType>
					          </xs:attribute>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>

		    <xs:key name="whackaMoleGameItemsKey">
			      <xs:selector xpath="./items/item | ./distractors/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:key name="whackaMoleGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:keyref name="whackaMoleGameItemsCorrectItemKey"
                 refer="whackaMoleGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./questions/question/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>

		    <xs:unique name="whackaMoleGameQuestionIdUnique">
			      <xs:selector xpath=".//questions/question"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:element name="quizGame" type="fiabQuizGameType">
		    <xs:key name="quizGameQuestionKey">
			      <xs:selector xpath="./question"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
	  </xs:element>
   <xs:element name="laneChangerGame" type="fiabBubblesGameType">
		    <xs:key name="laneChangerGameItemsKey">
			      <xs:selector xpath="./items/item | ./distractors/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:key name="laneChangerGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./items/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>

		    <xs:keyref name="laneChangerGameItemsCorrectItemKey"
                 refer="laneChangerGameCorrectAnswersCannotBeDistractorsKey">
			      <xs:selector xpath="./questions/question/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>

		    <xs:unique name="laneChangerGameQuestionIdUnique">
			      <xs:selector xpath=".//questions/question"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:element name="cogsGame">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="rcfInteraction">
					          <xs:sequence>
						            <xs:element name="coverScreen"
                              type="coverScreenType"
                              minOccurs="0"
                              maxOccurs="1"/>
						            <xs:element name="questions"
                              type="cogsQuestionsType"
                              minOccurs="1"
                              maxOccurs="1">
							              <xs:unique name="cogsQuestionIdUnique">
								                <xs:selector xpath="question"/>
								                <xs:field xpath="@id"/>
							              </xs:unique>
						            </xs:element>
					          </xs:sequence>
					          <xs:attribute name="skin" use="optional" default="snake">
						            <xs:simpleType>
							              <xs:restriction base="xs:string">
								                <xs:enumeration value="snake"/>
								                <xs:enumeration value="neon"/>
							              </xs:restriction>
						            </xs:simpleType>
					          </xs:attribute>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="storyDice">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="rcfInteraction">
					          <xs:sequence>
						            <xs:element name="coverScreen"
                              type="coverScreenType"
                              minOccurs="0"
                              maxOccurs="1"/>
						            <xs:element name="diceSet"
                              type="diceSetType"
                              minOccurs="1"
                              maxOccurs="unbounded"/>
					          </xs:sequence>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="spinnerGame">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="rcfInteraction">
					          <xs:sequence>
						            <xs:element name="coverScreen"
                              type="coverScreenType"
                              minOccurs="0"
                              maxOccurs="1"/>
					          </xs:sequence>
					          <xs:attribute name="removeAfterSelection"
                             type="yesNoType"
                             use="optional"
                             default="y"/>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="staticWordPool" type="staticWordPoolType"/>
   <xs:element name="mathsAddition" type="mathsAdditionType"/>
   <xs:element name="mathsSubtraction" type="mathsSubtractionType"/>
   <xs:element name="mathsMultiplication" type="mathsMultiplicationType"/>
   <xs:element name="mathsDivision" type="mathsDivisionType"/>
   <xs:element name="freeDrawing" type="feedbackFreeDrawingType"/>
   <xs:element name="cSpan">
		    <xs:annotation>
			      <xs:documentation>(standard) 'complex styled span' - contains formatting elements and marked inline elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexType mixed="true">
			      <xs:complexContent>
				        <xs:extension base="rcfFormattingObject">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="formattingElements" minOccurs="0"/>
						            <xs:group ref="markedInlineElements" minOccurs="0"/>
						            <xs:group ref="basicInlineElements" minOccurs="0"/>
						            <xs:element ref="cSpan" minOccurs="0"/>
						            <xs:element ref="sSpan" minOccurs="0"/>
						            <xs:element ref="colourText" minOccurs="0"/>
						            <xs:element ref="eSpan" minOccurs="0"/>
					          </xs:choice>
					          <xs:attribute name="lang" type="languageType" use="optional"/>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="sSpan">
		    <xs:annotation>
			      <xs:documentation>'simple styled span' contains formatting elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexType mixed="true">
			      <xs:complexContent>
				        <xs:extension base="rcfFormattingObject">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="formattingElements"/>
						            <xs:element ref="sSpan" minOccurs="0"/>
					          </xs:choice>
					          <xs:attributeGroup ref="rcfTriggerableAttributes"/>
					          <xs:attribute name="lang" type="languageType" use="optional"/>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="colourText">
        <xs:annotation>
            <xs:documentation>'colour text' contains text with a colour</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:complexContent>
                <xs:extension base="rcfFormattingObject">
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:group ref="formattingElements"/>
                    </xs:choice>
                    <xs:attributeGroup ref="rcfTriggerableAttributes"/>
                    <xs:attribute name="lang" type="languageType" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
   <xs:element name="rubric" type="rubricType">
		    <xs:unique name="rubricUniqueLang">
			      <xs:selector xpath="."/>
			      <xs:field xpath="@lang"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="printRubric" type="rubricType"/>
   <xs:element name="hints" type="hintsContainerBlockType">
		    <xs:unique name="hintLanguageUnique">
			      <xs:selector xpath="hintBlock"/>
			      <xs:field xpath="@lang"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="splitBlock" type="splitBlockType"/>
   <xs:element name="dl">
        <xs:annotation>
            <xs:documentation>'description list' (dl) encloses a list of groups of terms and
                descriptions.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:choice maxOccurs="unbounded">
                    <xs:element name="dt" type="dtType" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="dd" type="ddType" minOccurs="0" maxOccurs="unbounded"/>
                </xs:choice>
            </xs:sequence>
            <xs:attributeGroup ref="rcfTriggerableAttributes"/>
            <xs:attribute name="lang" type="languageType" use="optional"/>
        </xs:complexType>
    </xs:element>
   <xs:element name="a" type="hyperLinkType"/>
   <xs:element name="multiPanel" type="multiPanelType"/>
   <xs:element name="timedMarkupBlock" type="timedMarkupBlockType"/>
   <xs:element name="overallScore" type="overallScoreType"/>
   <xs:element name="prompt" type="activityPrompt"/>
   <xs:element name="itemDropDown" type="dropdownType">
		    <xs:unique name="itemDropDownItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemComplexDroppableBlock" type="itemComplexDroppableBlockType">
		    <xs:key name="itemComplexDroppableID">
			      <xs:selector xpath=".//itemComplexDroppables/item"/>
			      <xs:field xpath="@id"/>
		    </xs:key>
		    <xs:keyref name="itemComplexDroppableIDRef" refer="itemComplexDroppableID">
			      <xs:selector xpath=".//itemComplexDroppable/item"/>
			      <xs:field xpath="@id"/>
		    </xs:keyref>
		    <xs:unique name="uniqueItemComplexDroppableId">
			      <xs:selector xpath="./itemComplexDroppables/item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
		    <xs:unique name="itemComplexDroppableUniqueId">
			      <xs:selector xpath=".//itemComplexDroppable"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:element name="itemComplexDroppable">
		    <xs:complexType>
			      <xs:complexContent>
				        <xs:extension base="rcfMarkedInteractionWithExample">
					          <xs:sequence maxOccurs="unbounded">
						            <xs:element name="prefix" type="xs:string" minOccurs="0"/>
						            <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
							              <xs:complexType>
								                <xs:attribute name="id" type="xs:string" use="required"/>
							              </xs:complexType>
						            </xs:element>
						            <xs:element name="suffix" type="xs:string" minOccurs="0"/>
					          </xs:sequence>
					          <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
				        </xs:extension>
			      </xs:complexContent>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="itemRadio" type="itemRadioListType">
		    <xs:unique name="itemRadioItemIDUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemCheckbox" type="checkboxListType">
		    <xs:unique name="itemCheckboxItemIdUnique">
			      <xs:selector xpath="item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemSelectableText" type="itemBasedSelectableTextType">
		    <xs:unique name="itemSelectableTextEspanID">
			      <xs:selector xpath=".//eSpan"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemTypein" type="resizableMarkableTypeInTextType"/>
   <xs:element name="itemTypeinGroup" type="itemTypeinGroupType">
		    <xs:unique name="itemTypeinGroupIDUnique">
			      <xs:selector xpath=".//itemTypein"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemSentenceBuilder" type="itemSentenceBuilderType">
		    <xs:unique name="itemSentenceBuilderItemsUniqueIds">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemWordInsert" type="wordInsertType">
		    <xs:unique name="itemWordInsertItemsUniqueIds">
			      <xs:selector xpath=".//item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>
	  </xs:element>
   <xs:element name="itemListContainer">
		    <xs:complexType>
			      <xs:sequence>
				        <xs:element ref="itemList" minOccurs="1" maxOccurs="1"/>
			      </xs:sequence>
		    </xs:complexType>
	  </xs:element>
   <xs:element name="itemList" type="itembasedItemListType">
		    <xs:annotation>
			      <xs:documentation>
			</xs:documentation>
		    </xs:annotation>
		    <xs:unique name="listItemsItemIDUnique">
			      <xs:selector xpath="./item"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemRadioId">
			      <xs:selector xpath=".//itemRadio"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemCheckboxId">
			      <xs:selector xpath=".//itemCheckbox"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemDropDownId">
			      <xs:selector xpath=".//itemDropDown"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemTypeinId">
			      <xs:selector xpath=".//itemTypein"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemTypeinGroupId">
			      <xs:selector xpath=".//itemTypeinGroup"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemSelectableTextId">
			      <xs:selector xpath=".//itemSelectableText"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemComplexDroppableBlockId">
			      <xs:selector xpath=".//itemComplexDroppableBlock"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemWordInsertId">
			      <xs:selector xpath=".//itemWordInsert"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

		    <xs:unique name="itemSentenceBuilderId">
			      <xs:selector xpath=".//itemSentenceBuilder"/>
			      <xs:field xpath="@id"/>
		    </xs:unique>

	  </xs:element>
   <xs:simpleType name="collapsibleListType">
		    <xs:annotation>
			      <xs:documentation>From RCF-9095 - allow a 'complex' list (one that's allowed to contain interactions) the ability to be collapsible</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="default"/>
			      <xs:enumeration value="collapsed"/>
			      <xs:enumeration value="expanded"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="activitySkillType">
		    <xs:annotation>
			      <xs:documentation>Activity skill type used by the Activity Catalog</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:whiteSpace value="collapse"/>
			      <xs:enumeration value="Grammar"/>
			      <xs:enumeration value="Listening"/>
			      <xs:enumeration value="Reading"/>
			      <xs:enumeration value="Speaking"/>
			      <xs:enumeration value="Vocabulary"/>
			      <xs:enumeration value="Writing"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="activityRepresentationTypeSubset">
		    <xs:annotation>
			      <xs:documentation>Content representation type used in pbf and macx</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:whiteSpace value="collapse"/>
			      <xs:enumeration value="video"/>
			      <xs:enumeration value="audio"/>
			      <xs:enumeration value="story"/>
			      <xs:enumeration value="pictureStudy"/>
			      <xs:enumeration value="author"/>
			      <xs:enumeration value="slideShow"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="itemSetModeType">
		    <xs:annotation>
			      <xs:documentation>defines the modes that an itemSet defines, can be 'core', 'extension', 'challenge' and 'challenge2'</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="core"/>
			      <xs:enumeration value="extension"/>
			      <xs:enumeration value="challenge"/>
			      <xs:enumeration value="challenge2"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="itemBasedModeType">
		    <xs:annotation>
			      <xs:documentation>defines the modes that an itemBased activity defines, can be 'practice', 'practiceChallenge', 'challenge', 'test'</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="challenge"/>
			      <xs:enumeration value="practice"/>
			      <xs:enumeration value="practiceChallenge"/>
			      <xs:enumeration value="test"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="rcfInteger">
		    <xs:annotation>
			      <xs:documentation>An 'rcfInteger' is an integer value with a minimum value of 1</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:integer">
			      <xs:minInclusive value="1"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="userClassPattern">
		    <xs:annotation>
			      <xs:documentation>'classes' used in the RCF elements *must* start with mm_</xs:documentation>
		    </xs:annotation>
		    <xs:list>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:pattern value="(mm_\w+)"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:list>
	  </xs:simpleType>
   <xs:simpleType name="positioningMarkType">
		    <xs:annotation>
			      <xs:documentation>Mark the positioning items as one point (list) always</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="list"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="displayType">
		    <xs:annotation>
			      <xs:documentation>displayType attribute tells the XSLT transformer to markup the item as 'H'orizontal ('inline') or 'V'ertical ('block') via CSS styles</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="h"/>
			      <xs:enumeration value="v"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="listDisplayType">
		    <xs:annotation>
			      <xs:documentation>The enumerations for a 'list' display type</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="numbered"/>
			      <xs:enumeration value="bullet"/>
			      <xs:enumeration value="alpha"/>
			      <xs:enumeration value="upper-alpha"/>
			      <xs:enumeration value="roman"/>
			      <xs:enumeration value="plain"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="yesNoType">
		    <xs:annotation>
			      <xs:documentation>A simple 'Y' / 'N' type for attributes / datatypes</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="y"/>
			      <xs:enumeration value="n"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="yesType">
		    <xs:annotation>
			      <xs:documentation>'Y' or empty are the only valid values - hack for RCF-10250</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="y"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="exampleType">
		    <xs:annotation>
			      <xs:documentation>Specifies whether this is a non interactive / pre-populated element in the output page. 'Example' types are not scorable, and always assumed to be correct</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="yesNoType"/>
	  </xs:simpleType>
   <xs:simpleType name="capitaliseType">
		    <xs:annotation>
			      <xs:documentation>When 'capitalise' is set to 'y', any textual item dropped in to droppable will be auto capitalised (first word only)</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="yesNoType"/>
	  </xs:simpleType>
   <xs:simpleType name="wordBoxPositionType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="top"/>
			      <xs:enumeration value="bottom"/>
			      <xs:enumeration value="default"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="imageCaptionType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="standard"/>
			      <xs:enumeration value="corner"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="nonEmptyString">
		    <xs:annotation>
			      <xs:documentation>
				This 'type' is used on attributes which are required and required to have actual values (not just empty attributes) - such as ID's - usually used in conjunction with a 'unique' constraint to stop ID's
				being reused throughout the XML document.
			</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:minLength value="1"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="svgLinkedId">
		    <xs:restriction base="xs:string">
			      <xs:minLength value="1"/>
			      <xs:pattern value="([a-zA-Z0-9\-_]+)"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="noSpaceType">
		    <xs:annotation>
			      <xs:documentation>
				This 'type' is used on attributes which point to external assets (audio / video / images) - these are filenames and when served from a website, should never have spaces in the filenames.
				This check will cause the xml validation to fail against the schema if the asset name contains a space.
			</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:token">
			      <xs:pattern value="[^ ]*"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="wordType">
		    <xs:restriction base="xs:string">
			      <xs:pattern value="([a-zA-ZáéíóúüñÁÉÍÓÚÜÑ]+)"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="slideFromType">
		    <xs:annotation>
			      <xs:documentation>enumerations for slideBlock</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="left"/>
			      <xs:enumeration value="right"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="markingType">
		    <xs:annotation>
			      <xs:documentation>Mark the items as one point (item), or individually (list)</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="item"/>
			      <xs:enumeration value="list"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="languageType">
		    <xs:annotation>
			      <xs:documentation>Language type for the inner elements of an activity / reference content</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="en"/>
			      <xs:enumeration value="en-us"/>
			      <xs:enumeration value="en-gb"/>
			      <xs:enumeration value="es"/>
			      <xs:enumeration value="pl"/>
			      <xs:enumeration value="hi"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="triggerClassPattern">
		    <xs:annotation>
			      <xs:documentation>'trigger classes' used in the RCF elements *must* start with tr_</xs:documentation>
		    </xs:annotation>
		    <xs:list>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:pattern value="(tr_\w+)"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:list>
	  </xs:simpleType>
   <xs:simpleType name="checkboxListDisplayStyle">
		    <xs:annotation>
			      <xs:documentation>
				CheckBox Lists and RadioLists can have different display styles - either 'item' or 'standard' -
				- item will produce a standalone 'span' which is selectable / checkable
				- 'standard' will produce the standard radio or checkbox with a matching label
			</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="standard"/>
			      <xs:enumeration value="itemSelect"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="crosswordWordType">
		    <xs:restriction base="xs:string">
			<!-- Note: if we ever want to extend this to allow all accented characters we can use [A-Za-zÀ-ÖØ-öø-ÿ] -->
			      <xs:pattern value="([a-zA-Z0-9áéíóúüñÁÉÍÓÚÜÑ]+)"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="fixedWordSearchCrosswordDirectionType">
		    <xs:annotation>
			      <xs:documentation>Allowable directions for words in a fixedCrossword interaction</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="across"/>
			      <xs:enumeration value="down"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="hangmanWordType">
		    <xs:restriction base="xs:string">
			      <xs:pattern value="([a-zA-Z\-\s]+)"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="interactiveCatsDisplayType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="show"/>
			      <xs:enumeration value="hide"/>
			      <xs:enumeration value="blur"/>
			      <xs:enumeration value="highlight"/>
			      <xs:enumeration value="selectable"/>
			      <xs:enumeration value="selectableWords"/>
			      <xs:enumeration value="selectableCat"/>
			      <xs:enumeration value="selectableCatWords"/>
			      <xs:enumeration value="toggle"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="catsControlType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="toggle"/>
			      <xs:enumeration value="radio"/>
			      <xs:enumeration value="cumulative"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="matchingDisplayStyle">
      <xs:annotation>
        <xs:documentation>
            Matching can have 2 different display styles – either 'rotating' or 'standard' –
            – rotating will produce a mobile forward matching with 2 carousels that can link together
            – 'standard' will produce the standard matching output
        </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
        <xs:enumeration value="standard"/>
        <xs:enumeration value="rotating"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="playerSize">
		    <xs:annotation>
			      <xs:documentation>playerSize for media players - 'small, 'medium'' or 'large' (small = inline, medium=block, large = block) - default is 'large'</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="small"/>
			      <xs:enumeration value="medium"/>
			      <xs:enumeration value="large"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="panzoomType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="default"/>
			      <xs:enumeration value="inplace"/>
			      <xs:enumeration value="popup"/>
			      <xs:enumeration value="y"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="cardClassPattern">
		    <xs:annotation>
			      <xs:documentation>'Class' used in Pelmanism/cards/card must start with card_</xs:documentation>
		    </xs:annotation>
		    <xs:list>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:pattern value="(card_\w+)"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:list>
	  </xs:simpleType>
   <xs:simpleType name="pairClassPattern">
		    <xs:annotation>
			      <xs:documentation>'Class' used in Pelmanism/pairs - must start with pair_</xs:documentation>
		    </xs:annotation>
		    <xs:list>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:minLength value="2"/>
					          <xs:pattern value="(pair_\w+)"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:list>
	  </xs:simpleType>
   <xs:simpleType name="radioListDisplayStyle">
		    <xs:annotation>
			      <xs:documentation>
				CheckBox Lists and RadioLists can have different display styles - either 'item' or 'standard' -
				- item will produce a standalone 'span' which is selectable / checkable
				- 'standard' will produce the standard radio or checkbox with a matching label
			</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="standard"/>
			      <xs:enumeration value="itemSelect"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="typeinResizeType">
		    <xs:annotation>
			      <xs:documentation>Specifies whether the typein will resize to it's longest acceptable answer or the longest acceptable answer in the entire containing activity (default behavior)</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="activity"/>
			      <xs:enumeration value="content"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="balloonQuestionsCorrectType">
		    <xs:annotation>
			      <xs:documentation>number or 'single' or 'multi'</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="single"/>
			      <xs:enumeration value="multi"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="minMaxInteger">
		    <xs:annotation>
			      <xs:documentation>An 'rcfInteger' is an integer value with a minimum value of 1</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:integer">
			      <xs:minInclusive value="1"/>
			      <xs:maxInclusive value="5"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="fixedWordSearchDirectionType">
		    <xs:annotation>
			      <xs:documentation>Allowable directions for words in a fixedWordSearch interaction</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="n"/>
			      <xs:enumeration value="e"/>
			      <xs:enumeration value="s"/>
			      <xs:enumeration value="w"/>
			      <xs:enumeration value="ne"/>
			      <xs:enumeration value="se"/>
			      <xs:enumeration value="sw"/>
			      <xs:enumeration value="nw"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="sceneSpeechTypeValue">
		    <xs:annotation>
			      <xs:documentation>Type of Speech Element - narrator or character</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="character"/>
			      <xs:enumeration value="narrator"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="speechTipType">
		    <xs:annotation>
			      <xs:documentation>Tip Type for story / speech elements - defines the location of the tip class to be added</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="top"/>
			      <xs:enumeration value="topLeft"/>
			      <xs:enumeration value="topRight"/>
			      <xs:enumeration value="left"/>
			      <xs:enumeration value="leftTop"/>
			      <xs:enumeration value="leftBottom"/>
			      <xs:enumeration value="bottom"/>
			      <xs:enumeration value="bottomLeft"/>
			      <xs:enumeration value="bottomRight"/>
			      <xs:enumeration value="right"/>
			      <xs:enumeration value="rightTop"/>
			      <xs:enumeration value="rightBottom"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="speakerSideType">
		    <xs:annotation>
			      <xs:documentation>The side of the screen the speaker is on</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="left"/>
			      <xs:enumeration value="right"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="findInImageModeAttributeType">
		    <xs:annotation>
			      <xs:documentation>Mode to play game in</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="random"/>
			      <xs:enumeration value="sequential"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="spellingBeeSimpleWordAnswerType">
		    <xs:restriction base="xs:string">
			      <xs:pattern value="([a-zA-ZáéíóúüñÁÉÍÓÚÜÑ\- ]+)"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="fiabBubblesGameQuestionsCorrectType">
		    <xs:annotation>
			      <xs:documentation>number or 'single' or 'multi'</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="single"/>
			      <xs:enumeration value="multi"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="fiabBubblesGameBaseSpeedType">
		    <xs:annotation>
			      <xs:documentation>An 'rcfInteger' is an integer value with a minimum value of 1</xs:documentation>
		    </xs:annotation>
		    <xs:restriction base="xs:integer">
			      <xs:minInclusive value="1"/>
			      <xs:maxInclusive value="10"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="fiabQuizPromptType">
		    <xs:restriction base="xs:string">
			      <xs:minLength value="1"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="cogRestrictedStringLength">
		    <xs:restriction base="xs:string">
			      <xs:maxLength value="14"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="buildInFaceOptionType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="3d_glasses"/>
			      <xs:enumeration value="aeroplane_2"/>
			      <xs:enumeration value="aeroplane_3"/>
			      <xs:enumeration value="aeroplane_ticket"/>
			      <xs:enumeration value="aeroplane"/>
			      <xs:enumeration value="american_football"/>
			      <xs:enumeration value="artists_palette"/>
			      <xs:enumeration value="atlas"/>
			      <xs:enumeration value="backpack"/>
			      <xs:enumeration value="bag"/>
			      <xs:enumeration value="balloons"/>
			      <xs:enumeration value="basketball"/>
			      <xs:enumeration value="bed"/>
			      <xs:enumeration value="beehive"/>
			      <xs:enumeration value="beer"/>
			      <xs:enumeration value="bicycle"/>
			      <xs:enumeration value="bin"/>
			      <xs:enumeration value="bird"/>
			      <xs:enumeration value="birthday_cake"/>
			      <xs:enumeration value="blazer"/>
			      <xs:enumeration value="book"/>
			      <xs:enumeration value="boot_2"/>
			      <xs:enumeration value="boot"/>
			      <xs:enumeration value="bottled_water"/>
			      <xs:enumeration value="boxer_shorts"/>
			      <xs:enumeration value="bread"/>
			      <xs:enumeration value="bridge"/>
			      <xs:enumeration value="bus_2"/>
			      <xs:enumeration value="bus"/>
			      <xs:enumeration value="butterfly"/>
			      <xs:enumeration value="camera_2"/>
			      <xs:enumeration value="camera"/>
			      <xs:enumeration value="car_2"/>
			      <xs:enumeration value="car_park"/>
			      <xs:enumeration value="car"/>
			      <xs:enumeration value="caravan"/>
			      <xs:enumeration value="cargo_pants"/>
			      <xs:enumeration value="chair"/>
			      <xs:enumeration value="chefs_hat"/>
			      <xs:enumeration value="cinema"/>
			      <xs:enumeration value="coach"/>
			      <xs:enumeration value="coat"/>
			      <xs:enumeration value="coffee"/>
			      <xs:enumeration value="collosseum"/>
			      <xs:enumeration value="compass"/>
			      <xs:enumeration value="computer_2"/>
			      <xs:enumeration value="computer_mouse"/>
			      <xs:enumeration value="computer"/>
			      <xs:enumeration value="cook_book"/>
			      <xs:enumeration value="cooking_app"/>
			      <xs:enumeration value="cupcake"/>
			      <xs:enumeration value="cycling"/>
			      <xs:enumeration value="desert_island"/>
			      <xs:enumeration value="disco_ball"/>
			      <xs:enumeration value="do_not_disturb"/>
			      <xs:enumeration value="dog_walking"/>
			      <xs:enumeration value="donut"/>
			      <xs:enumeration value="drama"/>
			      <xs:enumeration value="dress"/>
			      <xs:enumeration value="drink"/>
			      <xs:enumeration value="drinking_fountain"/>
			      <xs:enumeration value="exercise_bike"/>
			      <xs:enumeration value="film"/>
			      <xs:enumeration value="fish"/>
			      <xs:enumeration value="fishing_rod"/>
			      <xs:enumeration value="flight_information"/>
			      <xs:enumeration value="flower"/>
			      <xs:enumeration value="folded_shirt"/>
			      <xs:enumeration value="food_delivery"/>
			      <xs:enumeration value="footbal_pitch"/>
			      <xs:enumeration value="forklift"/>
			      <xs:enumeration value="fountain"/>
			      <xs:enumeration value="french_fries"/>
			      <xs:enumeration value="game_controller_2"/>
			      <xs:enumeration value="game_controller"/>
			      <xs:enumeration value="glasses"/>
			      <xs:enumeration value="guitar"/>
			      <xs:enumeration value="hamburger"/>
			      <xs:enumeration value="handbag"/>
			      <xs:enumeration value="headphones"/>
			      <xs:enumeration value="helicopter"/>
			      <xs:enumeration value="high-heeled_shoe"/>
			      <xs:enumeration value="hiking"/>
			      <xs:enumeration value="hooded_sweatshirt"/>
			      <xs:enumeration value="hot_air_balloon_2"/>
			      <xs:enumeration value="hot_air_balloon"/>
			      <xs:enumeration value="hotel"/>
			      <xs:enumeration value="ice_lolly"/>
			      <xs:enumeration value="jacket_2"/>
			      <xs:enumeration value="jacket_3"/>
			      <xs:enumeration value="jacket_4"/>
			      <xs:enumeration value="jacket"/>
			      <xs:enumeration value="jeans"/>
			      <xs:enumeration value="jigsaw_puzzle"/>
			      <xs:enumeration value="joystick"/>
			      <xs:enumeration value="keyboard"/>
			      <xs:enumeration value="knife_and_fork"/>
			      <xs:enumeration value="knife_fork_and_plate"/>
			      <xs:enumeration value="laptop"/>
			      <xs:enumeration value="lighthouse"/>
			      <xs:enumeration value="lorry"/>
			      <xs:enumeration value="luggage"/>
			      <xs:enumeration value="map"/>
			      <xs:enumeration value="masquerade"/>
			      <xs:enumeration value="memory_card"/>
			      <xs:enumeration value="microphone"/>
			      <xs:enumeration value="microprocessor"/>
			      <xs:enumeration value="monitor"/>
			      <xs:enumeration value="moped_2"/>
			      <xs:enumeration value="moped"/>
			      <xs:enumeration value="motorhome"/>
			      <xs:enumeration value="mountains"/>
			      <xs:enumeration value="museum"/>
			      <xs:enumeration value="music_player_2"/>
			      <xs:enumeration value="music_player"/>
			      <xs:enumeration value="necklace"/>
			      <xs:enumeration value="no_dogs"/>
			      <xs:enumeration value="no_smoking"/>
			      <xs:enumeration value="park_bench"/>
			      <xs:enumeration value="park"/>
			      <xs:enumeration value="phone_and_tablet"/>
			      <xs:enumeration value="phone_tablet_and_computer"/>
			      <xs:enumeration value="phone"/>
			      <xs:enumeration value="photos"/>
			      <xs:enumeration value="picnic_table"/>
			      <xs:enumeration value="pizza"/>
			      <xs:enumeration value="play_equipment"/>
			      <xs:enumeration value="polo_shirt"/>
			      <xs:enumeration value="pond"/>
			      <xs:enumeration value="popcorn"/>
			      <xs:enumeration value="postcard"/>
			      <xs:enumeration value="printer"/>
			      <xs:enumeration value="radio"/>
			      <xs:enumeration value="rocket"/>
			      <xs:enumeration value="room_service_2"/>
			      <xs:enumeration value="room_service"/>
			      <xs:enumeration value="running_shoe"/>
			      <xs:enumeration value="running"/>
			      <xs:enumeration value="sailboat"/>
			      <xs:enumeration value="salad"/>
			      <xs:enumeration value="scooter"/>
			      <xs:enumeration value="ship_2"/>
			      <xs:enumeration value="ship"/>
			      <xs:enumeration value="shoe"/>
			      <xs:enumeration value="shopping_bag"/>
			      <xs:enumeration value="shorts"/>
			      <xs:enumeration value="shrimp"/>
			      <xs:enumeration value="signpost_2"/>
			      <xs:enumeration value="signpost"/>
			      <xs:enumeration value="skateboard"/>
			      <xs:enumeration value="skinny_jeans"/>
			      <xs:enumeration value="smart_tv"/>
			      <xs:enumeration value="smart_watch"/>
			      <xs:enumeration value="snorkel"/>
			      <xs:enumeration value="socks"/>
			      <xs:enumeration value="soup"/>
			      <xs:enumeration value="speaker"/>
			      <xs:enumeration value="squirrel"/>
			      <xs:enumeration value="steak"/>
			      <xs:enumeration value="sun_lounger"/>
			      <xs:enumeration value="sun"/>
			      <xs:enumeration value="sunflower"/>
			      <xs:enumeration value="sunglasses"/>
			      <xs:enumeration value="sunset"/>
			      <xs:enumeration value="sushi"/>
			      <xs:enumeration value="sweater"/>
			      <xs:enumeration value="swimming_pool_2"/>
			      <xs:enumeration value="swimming_pool"/>
			      <xs:enumeration value="swings"/>
			      <xs:enumeration value="t-shirt"/>
			      <xs:enumeration value="takeaway_coffee"/>
			      <xs:enumeration value="takeaway_food_2"/>
			      <xs:enumeration value="takeaway_food"/>
			      <xs:enumeration value="taxi"/>
			      <xs:enumeration value="television"/>
			      <xs:enumeration value="theatre"/>
			      <xs:enumeration value="ties"/>
			      <xs:enumeration value="toilets"/>
			      <xs:enumeration value="tourist_map"/>
			      <xs:enumeration value="tractor"/>
			      <xs:enumeration value="train"/>
			      <xs:enumeration value="trainer"/>
			      <xs:enumeration value="tram"/>
			      <xs:enumeration value="tree"/>
			      <xs:enumeration value="trees_and_road_2"/>
			      <xs:enumeration value="trees_and_road"/>
			      <xs:enumeration value="trees"/>
			      <xs:enumeration value="tropical_drink"/>
			      <xs:enumeration value="truck"/>
			      <xs:enumeration value="video_camera"/>
			      <xs:enumeration value="vr_headset"/>
			      <xs:enumeration value="waistcoat"/>
			      <xs:enumeration value="watch"/>
			      <xs:enumeration value="wave"/>
			      <xs:enumeration value="webcam"/>
			      <xs:enumeration value="wifi_router"/>
			      <xs:enumeration value="wine"/>
			      <xs:enumeration value="yacht"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="decimalNotationType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="comma"/>
			      <xs:enumeration value="point"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="decimalPlacesType">
		    <xs:restriction base="xs:integer">
			      <xs:minInclusive value="0"/>
			      <xs:maxInclusive value="6"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:simpleType name="divisionLayoutType">
		    <xs:restriction base="xs:string">
			      <xs:enumeration value="english"/>
			      <xs:enumeration value="european"/>
		    </xs:restriction>
	  </xs:simpleType>
   <xs:complexType name="rcfInteraction" mixed="false">
		    <xs:annotation>
			      <xs:documentation>The 'base' definition for an interaction, contains ID and CLASS attributes</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="rcfMarkedInteraction" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Builds on base RCF Interaction with a 'marked' attribute Y/N (default Y)</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:attribute name="marked" type="yesNoType" use="optional" default="y"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="rcfMarkedInteractionWithExample" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Builds on rcfMarkedInteraction with an example attribute</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteraction">
				        <xs:attribute name="example" type="exampleType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="rcfFormattingObject" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Base definition for a formatting object - contains ID and Class attributes</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="id" type="xs:ID" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="glossaryType">
		    <xs:sequence>
			      <xs:element name="entry" maxOccurs="unbounded">
				        <xs:complexType>
					          <xs:sequence>
						            <xs:element name="headword" type="xs:string"/>
						            <xs:element name="pos" type="xs:string"/>
						            <xs:element name="definition" type="xs:string"/>
					          </xs:sequence>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="listObject" abstract="true">
		    <xs:annotation>
			      <xs:documentation>Other lists (basicListType and fullListType) will inherit the base properties from this 'listObject' - it should never be used directly in the schema !</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="orientable">
				        <xs:attribute name="type" type="listDisplayType" use="required"/>
				        <xs:attribute name="start" type="xs:integer" use="optional"/>
				        <xs:attribute name="reversed" type="yesNoType" use="optional"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        <xs:attribute name="collapsible"
                          type="collapsibleListType"
                          use="optional"
                          default="default"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="basicListType">
		    <xs:annotation>
			      <xs:documentation>A basicList is just like a normal list, but with none of the interactive elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element ref="prompt"/>
								                <xs:element name="list" type="basicListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="basicInlineElements" minOccurs="0"/>
								                <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element name="p" type="simpleBlockElementsType" minOccurs="0"/>
								                <xs:element name="feedback"
                                    type="feedbackType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
								                <xs:element name="table" type="simpleTableType"/>
								                <xs:element name="block" type="simpleFormattingBlockType" minOccurs="0"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexListType">
		    <xs:annotation>
			      <xs:documentation>(complexListType) The 'fullList' is a list element which can utilise 'interactives' and formatting at any level</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element ref="prompt"/>
								                <xs:element name="block" type="blockType"/>
								                <xs:element name="feedback"
                                    type="feedbackType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
								                <xs:group ref="markedInlineElements"/>
								                <xs:element ref="mlTypein"/>
								                <xs:element ref="positioning"/>
								                <xs:element ref="ordering"/>
								                <xs:element ref="complexOrdering"/>
								                <xs:element ref="sentenceBuilder" minOccurs="0"/>
								                <xs:element ref="wordInsert" minOccurs="0"/>
								                <xs:element name="p" type="complexBlockElementsType"/>
								                <xs:element name="table" type="complexTableType"/>
								                <xs:element name="list" type="complexListType"/>
								                <xs:group ref="basicInlineElements"/>
								                <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
								                <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
								                <xs:group ref="formattingElements"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element ref="cSpan" minOccurs="0"/>
								                <xs:element ref="interactiveTextBlock" minOccurs="0"/>
								                <xs:element ref="mathsAddition" minOccurs="0"/>
								                <xs:element ref="mathsSubtraction" minOccurs="0"/>
								                <xs:element ref="mathsMultiplication" minOccurs="0"/>
								                <xs:element ref="mathsDivision" minOccurs="0"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemSimpleListType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>itemSimpleListType - used where there is a sequence of 'item' elements which do NOT have a 'correct' attribute</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="item" type="formattedItemType" maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="type" type="listDisplayType" use="optional"/>
		    <xs:attribute name="display" type="displayType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="orientable" abstract="true">
		    <xs:attribute name="display" type="displayType">
			      <xs:annotation>
				        <xs:documentation>Display the item type 'H'orizonally (inline) or 'V'ertically (block)</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="itemCorrectListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>itemCorrectListType - used where there is a sequence of 'item' elements which DO NEED or USE a 'correct' attribute</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="item" type="itemCorrectType" maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mediaItemCorrectListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>as 'itemCorrectListType' but allows images / audio to be included in the list</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="orientable">
				        <xs:sequence>
					          <xs:element name="item"
                           type="extendedItemCorrectType"
                           minOccurs="1"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="feedbackMediaItemCorrectListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>as 'mediaItemCorrectListType' but allows 'correctFeedbackAudio' to be included in the list</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="orientable">
				        <xs:sequence>
					          <xs:element name="item"
                           type="extendedFeedbackItemCorrectType"
                           minOccurs="1"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mediaItemExampleCorrectListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>as 'itemCorrectListType' but allows images / audio to be included in the list</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="orientable">
				        <xs:sequence>
					          <xs:element name="item"
                           type="extendedItemExampleCorrectType"
                           minOccurs="1"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="feedbackMediaItemExampleCorrectListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>as 'mediaItemExampleCorrectListType' but allows 'correctFeedbackAudio' attributes on items in the list
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="orientable">
				        <xs:sequence>
					          <xs:element name="item"
                           type="extendedFeedbackItemExampleCorrectType"
                           minOccurs="1"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="genericMetaDataType">
		    <xs:annotation>
			      <xs:documentation>Metadata used by RCF production processes, and made available for DevBliss (JURA), LearningMate, and Blink systems</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="id" type="nonEmptyString" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="title" type="nonEmptyString" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="subtitle" type="xs:string" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="isAnswerKey" type="yesNoType" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="isTeacherTip"
                     type="yesNoType"
                     minOccurs="0"
                     maxOccurs="1"/>
			      <xs:element name="category" type="xs:string" minOccurs="0" maxOccurs="1"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="metaDataWithSkills">
		    <xs:annotation>
			      <xs:documentation>Metadata for Activity with Skill levels</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="genericMetaDataType">
				        <xs:sequence>
					          <xs:element name="skills" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="skill"
                                    type="activitySkillType"
                                    minOccurs="1"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
						            <xs:unique name="skillUnique">
							              <xs:selector xpath="skill"/>
							              <xs:field xpath="."/>
						            </xs:unique>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mecType">

		    <xs:complexContent>
			      <xs:extension base="genericMetaDataType">
				        <xs:sequence>

					          <xs:element name="relatedActivitySets" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="activitySet"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="grammarReferences" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="grammarReference"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="cefrLevels" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="cefrLevel"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="activityTypes" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="activityType"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="timeLimitDuration"
                           type="xs:string"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="ages" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="age" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="contentSets" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="contentSet"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="dialect" type="xs:string" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="exam" type="xs:string" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="groups" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="group"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="levels" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="level"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="topics" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="topic"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="thumbnail"
                           type="nonEmptyString"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="pbfType">

		    <xs:complexContent>
			      <xs:extension base="genericMetaDataType">
				        <xs:sequence>
					<!-- PBF -->
					          <xs:element name="printPageReference"
                           type="xs:string"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="printActivityNumber"
                           type="xs:string"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="island" type="xs:string" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="inTLP" type="yesNoType" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="isAlternativeSourceType"
                           type="yesNoType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="noInheritance"
                           type="yesNoType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="skill" minOccurs="0" maxOccurs="unbounded">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="learningObjective" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="grammarPronPoint" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="lexicalSet" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="vocabularyItems" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="educationalAlignment" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="keyCourseAim" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:string"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="printPagesReference" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="xs:integer"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="sourceType" type="xs:string" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="alternativeSourceType"
                           type="xs:string"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="navioTheme" type="xs:string" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="contentId" type="xs:string" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="levelTaxonomyRoot"
                           type="xs:string"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="activityRepresentationType"
                           type="activityRepresentationTypeSubset"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="popupLinkType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
		    </xs:choice>
		    <xs:attribute name="infoBlockID" type="xs:IDREF" use="required"/>
	  </xs:complexType>
   <xs:complexType name="itemBasedType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Definition for the itemBased element </xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="itemSet" minOccurs="1" maxOccurs="4" type="itemSetType"/>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="mode" use="required" type="itemBasedModeType"/>
		    <xs:attribute name="timeLimit" type="rcfInteger" use="optional">
			      <xs:annotation>
				        <xs:documentation>Number of seconds allowed to complete the challenge mode - if missing no limit is set</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="itemSetType">
		    <xs:annotation>
			      <xs:documentation>Defines the itemSet element</xs:documentation>
		    </xs:annotation>
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:element name="item" type="itemBasedItemType"/>
		    </xs:sequence>
		    <xs:attribute name="type" type="itemSetModeType" use="required"/>
		    <xs:attribute name="select" type="xs:integer" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemBasedItemType" mixed="false">
		    <xs:attribute name="id" use="required" type="xs:string"/>
	  </xs:complexType>
   <xs:complexType name="coverScreenType">
		    <xs:sequence>
			      <xs:element name="gameInstruction"
                     type="simpleFormattingBlockType"
                     minOccurs="0"
                     maxOccurs="1"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="activityType" mixed="false">
		    <xs:choice minOccurs="1" maxOccurs="1">
			      <xs:group ref="mediaActivityElementGroup"/>
			      <xs:group ref="standardActivityElementGroup"/>
		    </xs:choice>
		    <!-- common activity attributes -->
		    <xs:attributeGroup ref="activityAttributes"/>
	  </xs:complexType>
   <xs:complexType name="activityWithGUID" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Full activity type used in production</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="activityType">
				        <xs:attribute name="id" use="required">
					          <xs:annotation>
						            <xs:documentation>
							Activity must have an id which adheres to a GUID (32 characters, 0-9a-f)
						</xs:documentation>
					          </xs:annotation>
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:minLength value="32"/>
							              <xs:pattern value="([0-9a-fA-F]{32})"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="overrideScore" use="optional">
					          <xs:simpleType>
						            <xs:restriction base="xs:integer">
							              <xs:minInclusive value="1"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="formattedItemType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Most basic example of an 'item' in a list</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:choice minOccurs="0" maxOccurs="unbounded">
				        <xs:group ref="formattingElements"/>
				        <xs:element ref="sSpan" minOccurs="0"/>
				        <xs:element ref="colourText" minOccurs="0"/>
			      </xs:choice>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="multiMediaFormattedItemType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>A basic example of an 'item' in a list which can contain multimedia elements (such as 'audio' or 'image')</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:choice minOccurs="0" maxOccurs="unbounded">
				        <xs:group ref="multimediaFormattingElementsAudio"/>
			      </xs:choice>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="itemCorrectType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Definition for 'item' elements inside an interaction which have a 'correct' attribute - no 'image' or 'audio' elements, only text and formatting elements allowed</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="formattedItemType">
				        <xs:attribute name="correct" type="yesNoType"/>
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemExampleCorrectType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>enhanced definition for 'item' elements inside an interaction which have a 'correct' attribute *and* can have an 'example' attribute - no 'image' or 'audio' elements, only text and formatting elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="itemCorrectType">
				        <xs:attribute name="example" type="exampleType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="extendedItemCorrectType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>extended definition for item correct/example items inside an interaction which can contain multimedia (image, audio) elements *and* have a @correct attribute *and* have an @audio attribute for playing audio when clicked / triggered by code</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="multimediaFormattingElementsAudio"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="correct" type="yesNoType"/>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="extendedFeedbackItemCorrectType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>extended definition for item correct/example items inside an interaction which can contain multimedia (image, audio) elements *and* have a @correct attribute *and* have an @audio attribute for playing audio when clicked / triggered by code *AND* has a @correctFeedbackAudio attribute to be played when used in a feedback enabled player</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="extendedItemCorrectType">
				        <xs:attribute name="correctFeedbackAudio" type="noSpaceType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="extendedItemExampleCorrectType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Builds on extendedItemCorrectType and allows an @example attribute</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="extendedItemCorrectType">
				        <xs:attribute name="example" type="exampleType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="extendedFeedbackItemExampleCorrectType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Builds on extendedItemExampleCorrectType and allows a @correctFeedbackAudio attribute to be played in a feedback enabled player</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="extendedItemExampleCorrectType">
				        <xs:attribute name="correctFeedbackAudio" type="noSpaceType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="formattedItemRankedType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Basic item type with access to ranks, id, and user</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="formattedItemType">
				        <xs:attribute name="rank" type="xs:integer" use="optional"/>
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="multiMediaItemRankedType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="multiMediaFormattedItemType">
				        <xs:attribute name="rank" type="xs:integer" use="optional"/>
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="multiMediaItemExampleRankedType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="multiMediaItemRankedType">
				        <xs:attribute name="example" type="exampleType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="feedbackMultiMediaItemExampleRankedType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="multiMediaItemExampleRankedType">
				        <xs:attribute name="correctFeedbackAudio" type="noSpaceType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mainType" mixed="false">
		    <xs:sequence>
			      <xs:element ref="distractors" minOccurs="0"/>

			      <xs:choice minOccurs="0" maxOccurs="unbounded">
				        <xs:element ref="prompt"/>
				        <xs:element ref="answerKey"/>
				        <xs:element ref="hints" minOccurs="0" maxOccurs="1"/>
				        <xs:element ref="multiPanel" minOccurs="0" maxOccurs="1"/>
				        <xs:element name="block"
                        type="blockType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
				        <xs:element name="highlightingTextBlock"
                        type="highlightingTextBlockType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
				        <xs:element name="feedback"
                        type="feedbackType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
				        <xs:element ref="imageSet" minOccurs="0" maxOccurs="unbounded"/>
				        <!-- RCF-328 -->
				        <xs:element ref="interactiveImageSet" minOccurs="0" maxOccurs="unbounded"/>
				        <xs:element ref="timedMarkupBlock" minOccurs="0" maxOccurs="unbounded"/>
				        <xs:element ref="interactiveTextBlock" minOccurs="0" maxOccurs="unbounded"/>
				        <xs:element ref="complexDroppableBlock" minOccurs="0"/>

				        <xs:element ref="splitBlock" minOccurs="0" maxOccurs="1"/>
				        <xs:element ref="overallScore" minOccurs="0" maxOccurs="1"/>

				        <xs:element name="presentation"
                        type="presentationBlockType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
				        <xs:element name="interactive"
                        type="blockType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>

			      </xs:choice>

			      <!--
				top level interactive / unmarked elements
				- flashcard *or*
				- carousel *or*
				- movingTargerts *or*
				- compositeScene *or*
				- colouring
			-->
			      <xs:choice minOccurs="0" maxOccurs="1">
				        <xs:group ref="topLevelInteractiveBlockElements"/>
			      </xs:choice>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="answerKeyType">
		    <xs:annotation>
			      <xs:documentation>AnswerKey type for PBF - only allowed (multiple) one of two types of top level children &lt;block&gt; or &lt;item&gt; </xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			<!-- extends rcfInteraction so that it has an id / example / class attribute-->
			      <xs:extension base="rcfInteraction">
				<!--
					has choice of two top-level elements:
					- block (multiple)
					or
					- item (multiple)
				 -->
				        <xs:choice>
					          <xs:element name="block" type="answerKeyLayoutBlockType" maxOccurs="unbounded"/>
					          <xs:element name="item" type="answerKeyRootItemType" maxOccurs="unbounded"/>
				        </xs:choice>
				        <xs:attribute name="type"
                          type="listDisplayType"
                          use="optional"
                          default="plain"/>
				        <xs:attribute name="start" type="xs:integer" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="answerKeyRootItemType">
		    <xs:annotation>
			      <xs:documentation>
				Definition for &lt;item&gt; elements inside an answer key
				- must have unique id inside answerKey element, must have an id and can have optional class
				- can contain formatted Item types
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="formattedItemType">
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="example" type="yesNoType" use="optional" default="n"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        <xs:attribute name="numbered" type="yesNoType" use="optional" default="y"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="answerKeyLayoutBlockType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				Layout &lt;block&gt; element for answerKeys
				- can contain &lt;answerKeyBlock&gt; and &lt;answerKeyItem&gt; elements
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="prompt" type="answerKeyPromptType"/>
			      <xs:element name="list" type="answerKeyListType"/>
			      <xs:element name="block" type="answerKeyLayoutBlockType"/>
			      <xs:element name="answerKeyBlock" type="answerKeyBlockType"/>
			      <xs:element name="answerKeyItem" type="answerKeyInlineItemType"/>
			      <xs:group ref="standardAnswerKeyElements"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="baseAnswerKeyBlockType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				Core answer key &lt;block&gt; element does not require an ID attribute
				- not used inside any &lt;answerKeyItem&gt; or &lt;answerKeyBlock&gt; elements
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="list" type="answerKeyListTypeWithNoAnswerKeyChildren"/>
			      <xs:element name="block" type="baseAnswerKeyBlockType"/>
			      <xs:group ref="formattingElements"/>
			      <xs:group ref="standardAnswerKeyElements"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="answerKeyBlockType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				AnswerKeyBlock element
				- a 'selectable' answer key element with an id and formatting
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="baseAnswerKeyBlockType">
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="example" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="answerKeyInlineItemType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				AnswerKey inline item type
				- requires an id, optional class and example
				- extends formatted Item Type as it allows multiple formatting type child elements
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="formattedItemType">
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="example" type="yesNoType" use="optional" default="n"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="answerKeyListType">
		    <xs:annotation>
			      <xs:documentation>
				A list element used inside an answerKey element
				- can have child list elements but they cannot contain answerKeyBlock or answerKeyItem elements
				- can contain answerKeyBlock elements
				- can contain answerKeyItem elements
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded" minOccurs="1">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element name="prompt" type="answerKeyPromptType"/>
								                <xs:element name="list" type="answerKeyListTypeWithNoAnswerKeyChildren"/>
								                <xs:element name="block" type="answerKeyLayoutBlockType"/>
								                <xs:element name="answerKeyBlock" type="answerKeyBlockType"/>
								                <xs:element name="answerKeyItem" type="answerKeyInlineItemType"/>
								                <xs:group ref="formattingElements"/>
								                <xs:group ref="standardAnswerKeyElements"/>
							              </xs:choice>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="answerKeyListTypeWithNoAnswerKeyChildren">
		    <xs:annotation>
			      <xs:documentation>
				A list element used inside an answerKey element
				- not allowed to contain answerKeyBlock or answerKeyItem elements for fear of infinite recursion :)
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded" minOccurs="1">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element name="list" type="basicAnswerKeyListType"/>
								                <xs:element name="h1" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="h2" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="h3" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="h4" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="h5" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="h6" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="p" type="answerKeySimpleBlockElementsType"/>
								                <xs:element name="block" type="baseAnswerKeyBlockType"/>
								                <xs:group ref="formattingElements"/>
								                <xs:group ref="multiMediaAnswerKeyElements"/>
							              </xs:choice>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="basicAnswerKeyListType">
		    <xs:annotation>
			      <xs:documentation>list used *inside* an answerKeyItem / answerKeyBlock element so it cannot contain clickable elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element name="prompt" type="answerKeyPromptType" minOccurs="0"/>
								                <xs:element name="list" type="basicAnswerKeyListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="multiMediaAnswerKeyElements" minOccurs="0"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element name="p" type="answerKeySimpleBlockElementsType" minOccurs="0"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="answerKeySimpleBlockElementsType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Same as 'simpleBlockElementsType' only we allow the &lt;answerKeyItem&gt; element inside as well</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="multiMediaAnswerKeyElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="answerKeyItem" type="answerKeyInlineItemType"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="answerKeyPromptType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="p" type="answerKeySimpleBlockElementsType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="multiMediaAnswerKeyElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="table" type="simpleTableType"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="canDoType">
		    <xs:annotation>
			      <xs:documentation>Unmarked list of items to rank users knowledge</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="itemSimpleListType">
				        <xs:attribute name="outOf" default="5">
					          <xs:simpleType>
						            <xs:restriction base="xs:integer">
							              <xs:minInclusive value="2"/>
							              <xs:maxInclusive value="10"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="id" type="xs:string" use="required"/>
				        <xs:attribute name="markedByTeacher"
                          type="yesNoType"
                          use="optional"
                          default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="carouselBlockType" mixed="true">
		    <xs:sequence>
			      <xs:choice minOccurs="1" maxOccurs="unbounded">
				        <xs:element name="block"
                        type="blockType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
			      </xs:choice>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="autoHeight" type="yesNoType" use="optional"/>
		    <xs:attribute name="numItems" type="xs:integer" use="optional">
			      <xs:annotation>
				        <xs:documentation>Set the maximum number of items to show in a single carousel frame - defaults to '1' if missing</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="resetTriggers"
                    type="yesNoType"
                    use="optional"
                    default="n">
			      <xs:annotation>
				        <xs:documentation>Setting this to 'y' will reset any trigger classes in the carousel contents when a new carousel slide is shown</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="singlePanelView" type="yesNoType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="simpleCarouselBlockType" mixed="true">
		    <xs:sequence>
			      <xs:choice minOccurs="1" maxOccurs="unbounded">
				        <xs:element name="block"
                        type="simpleCarouselBlockContentType"
                        minOccurs="0"
                        maxOccurs="unbounded"/>
			      </xs:choice>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="numItems" type="xs:integer" use="optional">
			      <xs:annotation>
				        <xs:documentation>Set the maximum number of items to show in a single carousel frame - defaults to '1' if missing</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="resetTriggers"
                    type="yesNoType"
                    use="optional"
                    default="n">
			      <xs:annotation>
				        <xs:documentation>Setting this to 'y' will reset any trigger classes in the carousel contents when a new carousel slide is shown</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="simpleCarouselBlockContentType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Blocks within a simpleCarousel can only contain simple types / media types -NO interactions are allowed</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <!-- -->
	  </xs:complexType>
   <xs:complexType name="categoriseType">
		    <xs:annotation>
			      <xs:documentation>RCF Categorise Interaction - can take many different shapes</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteraction">
				        <xs:sequence>
					          <xs:element name="category" minOccurs="1" maxOccurs="unbounded">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="catName"
                                    type="mixedMediaFormattingType"
                                    minOccurs="1"
                                    maxOccurs="1"/>
								                <xs:element name="item"
                                    type="feedbackMultiMediaItemExampleRankedType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
							              <xs:attribute name="id" type="xs:string" use="required"/>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="distractors" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="multiMediaItemRankedType"
                                    minOccurs="1"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="mobileDisplay" use="required">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="radioTable"/>
							              <xs:enumeration value="radioList"/>
							              <xs:enumeration value="dropDown"/>
							              <xs:enumeration value="touchable"/>
							              <xs:enumeration value="itemSelectList"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="desktopDisplay" use="required">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="radioTable"/>
							              <xs:enumeration value="draggable"/>
							              <xs:enumeration value="itemSelectList"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="list" use="optional" default="plain">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="plain"/>
							              <xs:enumeration value="alpha"/>
							              <xs:enumeration value="upper-alpha"/>
							              <xs:enumeration value="numbered"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexCategoriseType">
		    <xs:annotation>
			      <xs:documentation>A complex categorise is one where each item can be in multiple categories</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteraction">
				        <xs:sequence>
					          <xs:element name="items" type="complexCategoriseItemListType"/>
					          <xs:element name="categories">
						            <xs:complexType>
							              <xs:sequence minOccurs="1" maxOccurs="unbounded">
								                <xs:element name="category" maxOccurs="unbounded">
									                  <xs:complexType>
										                    <xs:sequence>
											                      <xs:element name="catName" type="mixedMediaFormattingType"/>
											                      <xs:sequence minOccurs="0" maxOccurs="unbounded">
												                        <xs:element name="item">
													                          <xs:complexType>
														                            <xs:complexContent>
															                              <xs:extension base="complexCategoryItemType">
																                                <xs:attribute name="example" type="exampleType" use="optional"/>
															                              </xs:extension>
														                            </xs:complexContent>
													                          </xs:complexType>
												                        </xs:element>
											                      </xs:sequence>
										                    </xs:sequence>
										                    <xs:attribute name="id" type="xs:string" use="required"/>
									                  </xs:complexType>
									                  <xs:unique name="complexCategoriseCategoryItemIDUnique">
										                    <xs:selector xpath="item"/>
										                    <xs:field xpath="@id"/>
									                  </xs:unique>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="mobileDisplay" use="required">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="checkboxTable"/>
							              <xs:enumeration value="checkboxList"/>
							              <xs:enumeration value="touchable"/>
							              <xs:enumeration value="itemSelectList"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="desktopDisplay" use="required">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="checkboxTable"/>
							              <xs:enumeration value="draggable"/>
							              <xs:enumeration value="itemSelectList"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="list" use="optional" default="plain">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="plain"/>
							              <xs:enumeration value="alpha"/>
							              <xs:enumeration value="upper-alpha"/>
							              <xs:enumeration value="numbered"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="restrict" use="optional" default="n" type="yesNoType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexCategoryItemType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="formattedItemType">
				        <xs:sequence minOccurs="0">
					          <xs:element ref="image"/>
				        </xs:sequence>
				        <xs:attribute name="id" type="xs:IDREF" use="required"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexCategoriseItemListType" mixed="true">
		    <xs:sequence maxOccurs="unbounded">
			<!-- cannot use itemRankedType here because it doesn't have @id set as 'xs:ID' which we need for xref purposes -->
			      <xs:element name="item">
				        <xs:complexType mixed="true">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="multimediaFormattingElementsAudio"/>
					          </xs:choice>
					          <xs:attribute name="id" type="xs:ID" use="required"/>
					          <xs:attribute name="audio" type="xs:string" use="optional"/>
					          <xs:attribute name="rank" type="xs:integer" use="optional"/>
					          <!-- RCF-266 -->
				        </xs:complexType>
				        <xs:unique name="complexCatUniqueItemID">
					          <xs:selector xpath=".//item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="chaseType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>This is *NOT* an interactiveTextType because it only works on 'text' nodes</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="simpleBlockElements"/>
		    </xs:choice>
		    <xs:attribute name="type" use="required">
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:enumeration value="blur"/>
					          <xs:enumeration value="fade"/>
					          <xs:enumeration value="highlight"/>
					          <xs:enumeration value="appear"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>
		    <xs:attribute name="timed" type="yesNoType" use="optional"/>
		    <xs:attribute name="begin" type="xs:integer" use="optional"/>
		    <xs:attribute name="showCountDown" type="yesNoType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="checkboxListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>A list of checkbox items - each item *can* have a 'correct' attribute which should be set to 'y' if it is the correct item, if the 'correct' attribute is missing, then it assumed that the item is not 'correct'</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="feedbackMediaItemExampleCorrectListType">
				        <xs:attribute name="id" type="xs:string" use="required"/>
				        <xs:attribute name="displayType" type="checkboxListDisplayStyle" use="optional"/>
				        <xs:attribute name="start" type="xs:integer" use="optional"/>
				        <xs:attribute name="reversed" type="yesNoType" use="optional"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        <xs:attribute name="example" type="exampleType" use="optional"/>
				        <xs:attribute name="marked" type="yesNoType" use="optional" default="y"/>
				        <xs:attribute name="restrict" type="yesNoType" use="optional" default="n">
					          <xs:annotation>
						            <xs:documentation>Restrict the number of 'checkable' items to the number of correct items in the list</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" type="markingType" use="optional" default="item">
					          <xs:annotation>
						            <xs:documentation>Marking types for checkbox: item (default) or list</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexBlockContentBlockTypeWithPrompt" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:element name="block"
                              type="complexBlockContentBlockType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="feedback"
                              type="feedbackType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="h1" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h2" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h3" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h4" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h5" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h6" type="complexDroppableBlockElementsType"/>
						            <xs:element name="p" type="complexDroppableBlockElementsType"/>
						            <xs:element name="list" type="complexDroppableTextListType"/>
						            <xs:element name="table" type="complexDroppableTableType"/>
						            <xs:element ref="prompt"/>
						            <!-- -->
						            <xs:group ref="basicInlineElements" minOccurs="0"/>
						            <xs:element ref="popupLink" minOccurs="0"/>
						            <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
						            <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
						            <!-- complex droppable 'cSpan' allows different items to normal cSpan -->
						            <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="column" type="yesNoType" use="optional"/>
				        <xs:attribute name="numberedInteractives"/>
				        <xs:attribute name="blockSet" type="yesNoType" use="optional"/>
				        <xs:attribute name="equaliseHeight" type="yesNoType" use="optional"/>
				        <xs:attribute name="lang" type="languageType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexDroppableTableType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="tr" type="complexDroppableRowType"/>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="complexDroppableRowType" mixed="false">
		    <xs:choice>
			      <xs:element name="td" type="complexDroppableTableCell" maxOccurs="unbounded"/>
			      <xs:choice maxOccurs="unbounded">
				        <xs:element name="th" type="complexDroppableTableCell"/>
			      </xs:choice>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="complexSpanType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>ComplexDroppable 'complex styled span' - contains formatting elements and marked inline elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="formattingElements" minOccurs="0"/>
					          <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
					          <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
					          <xs:group ref="basicInlineElements" minOccurs="0"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexDroppableBlockElementsType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="complexDroppableListBlockElementsType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="complexDroppableBlockElementsType">
				        <xs:choice>
					          <xs:element name="p"
                           type="complexDroppableBlockElementsType"
                           minOccurs="0"
                           maxOccurs="unbounded"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexDroppableTextListType">
		    <xs:annotation>
			      <xs:documentation>A basicList is just like a normal list, but with none of the interactive elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element ref="prompt"/>
								                <xs:element name="list" type="complexDroppableTextListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="basicInlineElements" minOccurs="0"/>
								                <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
								                <xs:element name="p"
                                    type="complexDroppableBlockElementsType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
								                <xs:element name="block"
                                    type="complexDroppableListBlockElementsType"
                                    minOccurs="0"/>
								                <xs:element name="feedback"
                                    type="feedbackType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexDroppableBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:element name="complexDroppables" type="complexDroppableListType"/>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:element ref="prompt"/>
						            <xs:element name="block"
                              type="complexBlockContentBlockTypeWithPrompt"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="feedback"
                              type="feedbackType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="h1" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h2" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h3" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h4" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h5" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h6" type="complexDroppableBlockElementsType"/>
						            <xs:element name="p" type="complexDroppableBlockElementsType"/>
						            <xs:element name="list" type="complexDroppableTextListType"/>
						            <xs:element name="table" type="complexDroppableTableType"/>
						            <!-- -->
						            <xs:group ref="basicInlineElements" minOccurs="0"/>
						            <xs:element ref="popupLink" minOccurs="0"/>
						            <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
						            <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
						            <!-- complex droppable 'cSpan' allows different items to normal cSpan -->
						            <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="restrict" type="yesNoType" use="optional"/>
			      </xs:extension>
			      <!-- RCF-394 -->
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="interactiveTextComplexDroppableBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="complexDroppableBlockType">
				        <xs:choice>
					          <xs:element ref="eSpan" minOccurs="0" maxOccurs="unbounded"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexDroppableListType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="item">
				        <xs:complexType mixed="true">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="multimediaFormattingElementsAudio"/>
					          </xs:choice>
					          <xs:attribute name="id" type="xs:ID" use="required"/>
					          <xs:attribute name="rank" type="xs:integer" use="optional"/>
					          <xs:attribute name="audio" type="xs:string" use="optional"/>
					          <xs:attribute name="restrictMaxShown" type="xs:positiveInteger" use="optional"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="complexDroppableTableCell" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="list" type="complexDroppableTextListType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
			      <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
			      <xs:element name="p" type="complexDroppableBlockElementsType" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attributeGroup ref="tableColumnAttributes"/>
	  </xs:complexType>
   <xs:complexType name="complexBlockContentBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:element name="block"
                              type="complexBlockContentBlockType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="feedback"
                              type="feedbackType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="h1" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h2" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h3" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h4" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h5" type="complexDroppableBlockElementsType"/>
						            <xs:element name="h6" type="complexDroppableBlockElementsType"/>
						            <xs:element name="p" type="complexDroppableBlockElementsType"/>
						            <xs:element name="list" type="complexDroppableTextListType"/>
						            <xs:element name="table" type="complexDroppableTableType"/>
						            <!-- -->
						            <xs:group ref="basicInlineElements" minOccurs="0"/>
						            <xs:element ref="popupLink" minOccurs="0"/>
						            <xs:group ref="complexDroppableMarkedInlineElements" minOccurs="0"/>
						            <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
						            <!-- complex droppable 'cSpan' allows different items to normal cSpan -->
						            <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="column" type="yesNoType" use="optional"/>
				        <xs:attribute name="numberedInteractives"/>
				        <xs:attribute name="blockSet" type="yesNoType" use="optional"/>
				        <xs:attribute name="equaliseHeight" type="yesNoType" use="optional"/>
				        <xs:attribute name="lang" type="languageType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="crosswordType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="words">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="word" maxOccurs="unbounded">
									                  <xs:complexType mixed="false">
										                    <xs:sequence minOccurs="1" maxOccurs="1">
											                      <xs:element name="value"
                                             type="crosswordWordType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
											                      <xs:element name="clue"
                                             type="multiMediaFormattedItemType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
										                    </xs:sequence>
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
										                    <xs:attribute name="firstLetterExample" type="exampleType"/>
										                    <xs:attribute name="example" type="yesNoType" use="optional"/>
									                  </xs:complexType>
								                </xs:element>
								                <xs:element name="hiddenWord"
                                    type="crosswordWordType"
                                    minOccurs="0"
                                    maxOccurs="1"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fixedCrosswordType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteraction">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="gridSize" type="fixedCrosswordGridSizeType"/>
					          <xs:element name="words" type="fixedCrosswordWordsType"/>
					          <xs:element name="hiddenWord" type="fixedCrosswordHiddenWordType" minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="hideClues" type="yesNoType" default="n" use="optional"/>
				        <xs:attributeGroup ref="fixedWordSearchAttributes"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fixedCrosswordGridSizeType" mixed="false">
		    <xs:attribute name="rows" type="xs:nonNegativeInteger" use="required"/>
		    <xs:attribute name="cols" type="xs:nonNegativeInteger" use="required"/>
	  </xs:complexType>
   <xs:complexType name="fixedCrosswordWordsType" mixed="true">
		    <xs:sequence>
			      <xs:element name="word"
                     type="fixedCrosswordWordType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="fixedCrosswordWordType">
		    <xs:sequence>
			      <xs:element name="value" type="crosswordWordType"/>
			      <xs:element name="clue" type="multiMediaFormattedItemType"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="example" type="exampleType"/>
		    <xs:attribute name="firstLetterExample" type="exampleType"/>
		    <xs:attribute name="startRow" type="xs:nonNegativeInteger" use="required"/>
		    <xs:attribute name="startCol" type="xs:nonNegativeInteger" use="required"/>
		    <xs:attribute name="direction"
                    type="fixedWordSearchCrosswordDirectionType"
                    use="required"/>
		    <xs:attribute name="clueNumber" type="xs:nonNegativeInteger" use="required"/>
	  </xs:complexType>
   <xs:complexType name="fixedCrosswordHiddenWordType">
		    <xs:sequence>
			      <xs:element name="letter"
                     type="fixedCrosswordLetterType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="fixedCrosswordLetterType" mixed="true">
		    <xs:attribute name="row" type="xs:nonNegativeInteger"/>
		    <xs:attribute name="col" type="xs:nonNegativeInteger"/>
	  </xs:complexType>
   <xs:complexType name="droppableType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="multimediaFormattingElementsAudio"/>
				        </xs:choice>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
				        <xs:attribute name="rank" type="xs:integer" use="optional"/>
				        <xs:attribute name="correctFeedbackAudio" type="noSpaceType" use="optional"/>
			      </xs:extension>
			      <!-- RCF-266 -->
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="eDivType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="simpleBlockElements" minOccurs="0"/>
					          <xs:group ref="basicInlineElements" minOccurs="0"/>
				        </xs:choice>
				        <xs:attribute name="cat" type="xs:IDREF" use="optional"/>
				        <xs:attribute name="correct" type="yesNoType" use="optional"/>
				        <xs:attribute name="column" type="yesNoType" use="optional"/>
				        <xs:attribute name="toggleStates" type="xs:integer" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="eSpanType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="formattingElements" minOccurs="0"/>
					          <xs:group ref="basicInlineElements" minOccurs="0"/>
					          <xs:element ref="sSpan" minOccurs="0"/>
					          <xs:element ref="colourText" minOccurs="0"/>
				        </xs:choice>
				        <xs:attribute name="cat" type="xs:IDREF" use="optional"/>
				        <xs:attribute name="distractor" type="yesNoType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Distractor ? if set to 'y' then it's not included in show answers / mark answers</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="correct" type="yesNoType" use="optional"/>
				        <xs:attribute name="toggleStates" type="xs:integer" use="optional"/>
				        <xs:attribute name="lang" type="languageType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="flashcardType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Flash card interaction - top-level block element under 'main', contains 'descriptors' and card items</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="descriptors">
						            <xs:annotation>
							              <xs:documentation>Descriptors are user / author configurable metadata values which are assignable to 'definition' items inside each card</xs:documentation>
						            </xs:annotation>
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
									                  <xs:complexType>
										                    <xs:complexContent>
											                      <xs:extension base="formattedItemType">
												                        <xs:attribute name="id" type="nonEmptyString" use="required"/>
												                        <xs:attribute name="show" type="yesNoType" default="n">
													                          <xs:annotation>
														                            <xs:documentation>Show / hide the descriptor types be default when activity is loaded</xs:documentation>
													                          </xs:annotation>
												                        </xs:attribute>
											                      </xs:extension>
										                    </xs:complexContent>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="cards">
						            <xs:annotation>
							              <xs:documentation>Defines the 'cards' (or slides) used inside the flash cards interaction</xs:documentation>
						            </xs:annotation>
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="card"
                                    type="flashcardCardType"
                                    minOccurs="1"
                                    maxOccurs="unbounded">
									                  <xs:annotation>
										                    <xs:documentation>A card is made up of a tilte, description, image and a block of RCF content (potentiallcy containing some markable interactions)</xs:documentation>
									                  </xs:annotation>
									                  <xs:unique name="fcCardIDUnique">
										                    <xs:annotation>
											                      <xs:documentation>Unique restriction to ensure that all 'card' elements have a unique ID inside of the parent 'flashcard' element</xs:documentation>
										                    </xs:annotation>
										                    <xs:selector xpath="."/>
										                    <xs:field xpath="@id"/>
									                  </xs:unique>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="showNext" type="yesNoType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="flashcardCardType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="cardTitle" minOccurs="0" maxOccurs="1">
						            <xs:annotation>
							              <xs:documentation>cardTitle is displayed above the image in the flashcard being displayed</xs:documentation>
						            </xs:annotation>
						            <xs:complexType>
							              <xs:complexContent>
								                <xs:extension base="basicFormattingType">
									                  <xs:attribute name="class" type="userClassPattern" use="optional"/>
								                </xs:extension>
							              </xs:complexContent>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="cardDescription"
                           minOccurs="0"
                           maxOccurs="1"
                           type="basicFormattingType">
						            <xs:annotation>
							              <xs:documentation>cardDescription is optional information which can be assigned to the card</xs:documentation>
						            </xs:annotation>
					          </xs:element>
					          <xs:element name="interactiveImage"
                           minOccurs="0"
                           maxOccurs="1"
                           type="interactiveImageType"/>
					          <xs:element name="definitions" minOccurs="0" maxOccurs="1">
						            <xs:annotation>
							              <xs:documentation>A list of 'items' which refer to the descriptors - configurable by the user to switch them on / off in the output flashcard</xs:documentation>
						            </xs:annotation>
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="definitionItemType"
                                    minOccurs="1"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="block"
                           type="flashcardBlockType"
                           minOccurs="0"
                           maxOccurs="1">
						            <xs:annotation>
							              <xs:documentation>Block of markup / further markable interactions in the flashcard</xs:documentation>
						            </xs:annotation>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="definitionItemType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="multiMediaFormattedItemType">
				        <xs:attribute name="refID" type="nonEmptyString" use="required"/>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="flashcardElementsType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:group ref="markedInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element ref="cSpan" minOccurs="0"/>
			      <xs:element ref="eSpan" minOccurs="0" maxOccurs="unbounded"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="flashcardBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:element name="block"
                              type="flashcardBlockType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="feedback"
                              type="feedbackType"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
						            <xs:element name="h1" type="flashcardElementsType"/>
						            <xs:element name="h2" type="flashcardElementsType"/>
						            <xs:element name="h3" type="flashcardElementsType"/>
						            <xs:element name="h4" type="flashcardElementsType"/>
						            <xs:element name="h5" type="flashcardElementsType"/>
						            <xs:element name="h6" type="flashcardElementsType"/>
						            <xs:element name="p" type="flashcardElementsType"/>
						            <xs:element name="list" type="flashcardListType"/>
						            <xs:element name="table" type="flashcardTableType"/>
						            <!-- -->
						            <xs:group ref="basicInlineElements" minOccurs="0"/>
						            <xs:group ref="flashcardMarkedBlockElements" minOccurs="0"/>
						            <xs:element ref="eSpan" minOccurs="0"/>
						            <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
						            <xs:group ref="markedInlineElements" minOccurs="0"/>
						            <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="column" type="yesNoType" use="optional"/>
				        <xs:attribute name="numberedInteractives"/>
				        <xs:attribute name="blockSet" type="yesNoType" use="optional"/>
				        <xs:attribute name="equaliseHeight" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="flashcardTableType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="tr">
				        <xs:complexType mixed="false">
					          <xs:choice>
						            <xs:element name="td" maxOccurs="unbounded">
							              <xs:complexType mixed="true">
								                <xs:choice minOccurs="0" maxOccurs="unbounded">
									                  <xs:element name="list" type="flashcardListType" minOccurs="0"/>
									                  <xs:group ref="formattingElements" minOccurs="0"/>
									                  <xs:group ref="basicInlineElements" minOccurs="0"/>
									                  <xs:group ref="markedInlineElements" minOccurs="0"/>
									                  <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
									                  <xs:element name="p" type="complexBlockElementsType" minOccurs="0"/>
									                  <xs:element ref="sSpan" minOccurs="0"/>
									                  <xs:element ref="colourText" minOccurs="0"/>
									                  <xs:element ref="eSpan" minOccurs="0"/>
								                </xs:choice>
								                <xs:attributeGroup ref="tableColumnAttributes"/>
							              </xs:complexType>
						            </xs:element>
						            <xs:choice maxOccurs="unbounded">
							              <xs:element name="th">
								                <xs:complexType mixed="true">
									                  <xs:choice minOccurs="0" maxOccurs="unbounded">
										                    <xs:group ref="formattingElements" minOccurs="0"/>
										                    <xs:group ref="basicInlineElements" minOccurs="0"/>
										                    <xs:element ref="sSpan" minOccurs="0"/>
										                    <xs:element ref="colourText" minOccurs="0"/>
										                    <xs:element name="p" type="simpleBlockElementsType" minOccurs="0"/>
									                  </xs:choice>
									                  <xs:attributeGroup ref="tableColumnAttributes"/>
								                </xs:complexType>
							              </xs:element>
						            </xs:choice>
					          </xs:choice>
					          <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="flashcardListType">
		    <xs:annotation>
			      <xs:documentation>A basicList is just like a normal list, but with none of the interactive elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element name="list" type="flashcardListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="basicInlineElements" minOccurs="0"/>
								                <xs:group ref="markedInlineElements" minOccurs="0"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element ref="cSpan" minOccurs="0"/>
								                <xs:element ref="eSpan" minOccurs="0" maxOccurs="unbounded"/>
								                <xs:element name="p" minOccurs="0" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:complexContent>
											                      <xs:extension base="simpleBlockElementsType">
												                        <xs:choice minOccurs="0" maxOccurs="unbounded">
													                          <xs:element ref="eSpan" minOccurs="0" maxOccurs="unbounded"/>
												                        </xs:choice>
											                      </xs:extension>
										                    </xs:complexContent>
									                  </xs:complexType>
								                </xs:element>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="blendedFlashcardsType" mixed="true">
		    <xs:choice minOccurs="1" maxOccurs="unbounded">
			      <xs:element name="card">
				        <xs:complexType mixed="true">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="formattingElements"/>
						            <xs:element ref="sSpan"/>
						            <xs:element ref="colourText" minOccurs="0"/>
					          </xs:choice>

					          <xs:attribute name="id" type="nonEmptyString" use="required"/>
					          <xs:attribute name="image" type="nonEmptyString" use="required"/>
					          <xs:attribute name="audio" type="nonEmptyString" use="required"/>
					          <xs:attribute name="a11yTitle" type="xs:string" use="optional"/>
					          <xs:attribute name="a11yTitleLang" type="languageType" use="optional"/>

				        </xs:complexType>
			      </xs:element>
			      <xs:element name="textCard">
				        <xs:complexType mixed="true">
					          <xs:sequence>
						            <xs:element name="definition">
							              <xs:complexType mixed="true">
								                <xs:choice minOccurs="0" maxOccurs="unbounded">
									                  <xs:group ref="formattingElements"/>
									                  <xs:element ref="sSpan"/>
									                  <xs:element ref="colourText" minOccurs="0"/>
								                </xs:choice>
							              </xs:complexType>
						            </xs:element>
						            <xs:element name="word">
							              <xs:complexType mixed="true">
								                <xs:choice minOccurs="0" maxOccurs="unbounded">
									                  <xs:group ref="formattingElements"/>
									                  <xs:element ref="sSpan"/>
									                  <xs:element ref="colourText" minOccurs="0"/>
								                </xs:choice>
							              </xs:complexType>
						            </xs:element>
					          </xs:sequence>
					          <xs:attribute name="id" type="nonEmptyString" use="required"/>
					          <xs:attribute name="audio" type="nonEmptyString" use="required"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="hangmanType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="words">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="word" maxOccurs="unbounded">
									                  <xs:complexType mixed="false">
										                    <xs:sequence minOccurs="1" maxOccurs="1">
											                      <xs:element name="value" type="hangmanWordType" minOccurs="1" maxOccurs="1"/>
											                      <xs:element name="clue"
                                             type="multiMediaFormattedItemType"
                                             minOccurs="0"
                                             maxOccurs="1"/>
										                    </xs:sequence>
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="triesLabel" type="xs:string" use="optional"/>
				        <xs:attribute name="numAttempts" type="xs:integer" default="8"/>
				        <xs:attribute name="showClue" type="yesNoType" default="y"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="interactiveImageType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Interactive Image element is an image which can have interactive behavior attached to it. Current behaviors are: blur, timed and spotlight.
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:attribute name="type" use="optional">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:whiteSpace value="collapse"/>
							              <xs:enumeration value="">
								                <xs:annotation>
									                  <xs:documentation>Default value if missing - just shows an image</xs:documentation>
								                </xs:annotation>
							              </xs:enumeration>
							              <xs:enumeration value="blur">
								                <xs:annotation>
									                  <xs:documentation>'blur' - the image will be blurred on first display, and clicking / successive clicks will remove the blur value in 4 steps</xs:documentation>
								                </xs:annotation>
							              </xs:enumeration>
							              <xs:enumeration value="timed">
								                <xs:annotation>
									                  <xs:documentation>
										                    <xs:documentation>'timed' - the image will be shown for a number of seconds (defined in the element) and then hidden / replaced with a 'flash again' or 'reveal' choice</xs:documentation>
									                  </xs:documentation>
								                </xs:annotation>
							              </xs:enumeration>
							              <xs:enumeration value="spotlight">
								                <xs:annotation>
									                  <xs:documentation>'spotlight' - the image will have a resizable 'spotlight' control allowing the user to reveal parts of the image by using the mouse / touch screen</xs:documentation>
								                </xs:annotation>
							              </xs:enumeration>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="src" type="noSpaceType" use="required"/>
				        <xs:attribute name="duration" type="rcfInteger" use="optional"/>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="imageSetType" mixed="true">
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:element ref="image"/>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="interactiveImageSetType" mixed="true">
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:element name="image" type="interactiveImageImageSetType"/>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="type">
			      <xs:annotation>
				        <xs:documentation>Extensible 'types' of interactiveImageSets</xs:documentation>
			      </xs:annotation>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:enumeration value="zoom"/>
					          <xs:enumeration value="carousel"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="interactiveImageImageSetType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="simpleImageType">
				        <xs:annotation>
					          <xs:documentation>Interactive Image Type for interactive image set element</xs:documentation>
				        </xs:annotation>
				        <xs:attribute name="largeImageSrc" type="noSpaceType" use="optional"/>
				        <xs:attribute name="audio" type="xs:string" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="interactiveTextBlockElementsType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:group ref="markedInlineElements" minOccurs="0"/>
			      <xs:group ref="interactiveTextBlockElementsSpanGroup"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="interactiveTextType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="cats" type="interactiveCatsType" minOccurs="0"/>
					          <xs:sequence minOccurs="0">
						            <xs:element name="complexDroppableBlock"
                              type="interactiveTextComplexDroppableBlockType"
                              minOccurs="0"/>
					          </xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="interactiveTextBlockLevelElements"/>
						            <xs:element name="eDiv" type="eDivType" minOccurs="0" maxOccurs="unbounded"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="timed" type="yesNoType" use="optional"/>
				        <xs:attribute name="begin" type="xs:integer" use="optional"/>
				        <xs:attribute name="showCountDown" type="yesNoType" use="optional"/>
				        <xs:attribute name="controlType" type="catsControlType" use="optional"/>
				        <xs:attribute name="defaultCatID" type="xs:IDREF" use="optional"/>
				        <xs:attribute name="type" type="interactiveCatsDisplayType" use="required"/>
				        <xs:attribute name="restrict" type="yesNoType" use="optional" default="n">
					          <xs:annotation>
						            <xs:documentation>Restrict the number of 'checkable' items to the number of correct items in the list</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" type="markingType" default="item" use="optional">
					          <xs:annotation>
						            <xs:documentation>Mark the items as one point (item), or individually (list) - default</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="interactiveTextContentBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="interactiveTextBlockLevelElements"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="column" type="yesNoType" use="optional"/>
				        <xs:attribute name="numberedInteractives"/>
				        <xs:attribute name="blockSet" type="yesNoType" use="optional"/>
				        <xs:attribute name="equaliseHeight" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="interactiveTextTableType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="tr">
				        <xs:complexType mixed="false">
					          <xs:choice>
						            <xs:element name="td" maxOccurs="unbounded">
							              <xs:complexType mixed="true">
								                <xs:choice minOccurs="0" maxOccurs="unbounded">
									                  <xs:element name="list" type="interactiveTextListType" minOccurs="0"/>
									                  <xs:group ref="formattingElements" minOccurs="0"/>
									                  <xs:group ref="basicInlineElements" minOccurs="0"/>
									                  <xs:group ref="markedInlineElements" minOccurs="0"/>
									                  <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
									                  <xs:element name="p" type="complexBlockElementsType" minOccurs="0"/>
									                  <xs:element ref="sSpan" minOccurs="0"/>
									                  <xs:element ref="colourText" minOccurs="0"/>
									                  <xs:element ref="eSpan" minOccurs="0"/>
								                </xs:choice>
								                <xs:attributeGroup ref="tableColumnAttributes"/>
							              </xs:complexType>
						            </xs:element>
						            <xs:choice maxOccurs="unbounded">
							              <xs:element name="th">
								                <xs:complexType mixed="true">
									                  <xs:choice minOccurs="0" maxOccurs="unbounded">
										                    <xs:group ref="formattingElements" minOccurs="0"/>
										                    <xs:group ref="basicInlineElements" minOccurs="0"/>
										                    <xs:element ref="sSpan" minOccurs="0"/>
										                    <xs:element ref="colourText" minOccurs="0"/>
										                    <xs:element name="p" type="simpleBlockElementsType" minOccurs="0"/>
									                  </xs:choice>
									                  <xs:attributeGroup ref="tableColumnAttributes"/>
								                </xs:complexType>
							              </xs:element>
						            </xs:choice>
					          </xs:choice>
					          <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="interactiveCatsType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>
					- each 'cat' has it's own 'begin' value, which is the number of seconds to start *AFTER* the 'cats' begin value
					- controlType - radio or toggle or cumulative selection of categories
						- 'cumulative' - relates to applying each 'cat' successively when clicking on a 'cat' - eg. 'progressive' selection as
						  opposed to 'radio' selection - think 'easy, medium, hard' - clicking on hard encompasses 'easy + medium'
					- defaultCatID - the default cat ID that is selected and applied when the page is loaded
			</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="cat" maxOccurs="unbounded">
				        <xs:complexType mixed="true">
					          <xs:attribute name="id" type="xs:ID" use="required"/>
					          <xs:attribute name="caption"/>
					          <xs:attribute name="onCaption" use="optional"/>
					          <xs:attribute name="begin" type="xs:integer" use="optional"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="interactiveTextListType">
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element ref="prompt"/>
								                <xs:element name="block"
                                    type="interactiveTextContentBlockType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
								                <xs:element name="feedback"
                                    type="feedbackType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
								                <xs:element name="list" type="interactiveTextListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="basicInlineElements" minOccurs="0"/>
								                <xs:group ref="markedInlineElements" minOccurs="0"/>
								                <xs:group ref="interactiveTextBlockElementsSpanGroup"/>
								                <xs:element name="p" type="interactiveTextBlockElementsType" minOccurs="0"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="locatingType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:choice minOccurs="1">
					          <xs:element name="dropDown" type="locatingItemCorrectListType">
						            <xs:unique name="l-dropDownItemIDUnique">
							              <xs:selector xpath="item"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
					          <xs:element name="typein" type="locatingTypeInTextType"/>
				        </xs:choice>
				        <xs:attribute name="distractor" type="yesNoType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="locatingTypeInTextType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:annotation>
					          <xs:documentation>Type In Used in the Locating TypeIn - does not include an 'Example' attribute as this is set in the 'locating' element itself, also does *not* have to support acceptable anwers as Locating can be a distractor</xs:documentation>
				        </xs:annotation>
				        <xs:sequence>
					          <xs:element name="prefix" type="xs:string" minOccurs="0"/>
					          <xs:element name="acceptable" minOccurs="0">
						            <xs:complexType mixed="false">
							              <xs:annotation>
								                <xs:documentation>acceptable answers for the TypeIn - the program will check this list against the typed answer (case insensitive) and mark as correct/wrong as applicable</xs:documentation>
							              </xs:annotation>
							              <xs:sequence>
								                <xs:element name="item" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
						            <xs:unique name="acceptableLocatingTypeInItemDUnique">
							              <xs:selector xpath=".//item"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
					          <xs:element name="suffix" type="xs:string" minOccurs="0"/>
					          <xs:element name="hint" type="xs:string" minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="caseSensitive" type="yesNoType">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the generated HTML should be case sensitive when checking the answers entered by the user</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="expandAnswers" type="yesNoType" default="n">
					          <xs:annotation>
						            <xs:documentation>All available answers will be generated from the acceptable/item[0] answer token string if set to 'Y', otherwise the 'acceptable/item' answers will be used
						</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="restrict" type="yesNoType" default="n" use="optional">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the output 'input element' in the html has a 'maxlength' attribute set to the length of the longest acceptable answer
						</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="ignorePunctuation"
                          type="yesNoType"
                          default="n"
                          use="optional">
					          <xs:annotation>
					 	           <xs:documentation>Specifies whether the user answer will be stripped of punctuation characters and compared against the similarly stripped provided answers</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="locatingItemCorrectListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>locatingIemCorrectListType - used where there is a sequence of locating 'item' elements which DO NEED or USE a 'correct' attribute **BUT** do NOT need an 'example' attribute on one of the items</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="orientable">
				        <xs:sequence>
					          <xs:element name="item" type="itemCorrectType" maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
				        <xs:attribute name="id" type="nonEmptyString"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="matchingType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="distractors" minOccurs="0">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="matchingMultiMediaItemRankedType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="pair" maxOccurs="unbounded">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="matchItem" type="matchingMultiMediaItemRankedType"/>
								                <xs:element name="matchTarget" type="matchingMultiMediaItemRankedType"/>
							              </xs:sequence>
							              <xs:attribute name="example" type="exampleType" use="optional"/>
							              <xs:attribute name="correctFeedbackAudio" type="noSpaceType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="clickStick" type="yesNoType" default="n">
					          <xs:annotation>
						            <xs:documentation>Override the 'draggable' behavior on desktop and always have the interaction in 'click-stick' mode</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="display" type="displayType" use="optional" default="v"/>
				        <xs:attribute name="displayType"
                          type="matchingDisplayStyle"
                          use="optional"
                          default="standard"/>
				        <xs:attribute name="mobileDisplay"
                          type="matchingDisplayStyle"
                          use="optional"
                          default="standard"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexMatchingType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="distractors" minOccurs="0">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    type="multiMediaItemRankedType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="matchItems">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="matchItem" minOccurs="1" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:complexContent>
											                      <xs:extension base="multiMediaItemRankedType">
												                        <xs:attribute name="example" type="exampleType" use="optional"/>
											                      </xs:extension>
										                    </xs:complexContent>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="matchTargets">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="matchTarget" minOccurs="1" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:complexContent>
											                      <xs:extension base="multiMediaItemRankedType">
												                        <xs:sequence>
													                          <xs:element name="acceptable" minOccurs="1" maxOccurs="1">
														                            <xs:complexType mixed="false">
															                              <xs:annotation>
																                                <xs:documentation>Acceptable match target IDs for this match item</xs:documentation>
															                              </xs:annotation>
															                              <xs:sequence>
																                                <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
																	                                  <xs:complexType>
																		                                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
																	                                  </xs:complexType>
																                                </xs:element>
															                              </xs:sequence>
														                            </xs:complexType>
														                            <xs:unique name="complexMatchTargetAnswersUniqueIDs">
															                              <xs:selector xpath=".//item"/>
															                              <xs:field xpath="@id"/>
														                            </xs:unique>
													                          </xs:element>
												                        </xs:sequence>
												                        <xs:attribute name="example" type="exampleType" use="optional"/>
											                      </xs:extension>
										                    </xs:complexContent>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="clickStick" type="yesNoType" default="n">
					          <xs:annotation>
						            <xs:documentation>Override the 'draggable' behavior on desktop and always have the interaction in 'click-stick' mode</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="display" type="displayType" use="optional" default="v"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="matchingMultiMediaItemRankedType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="multiMediaItemRankedType"/>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="simpleAudioType" mixed="false">
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:element name="track">
				        <xs:complexType mixed="false">
					          <xs:attribute name="src" type="noSpaceType" use="required"/>
					          <xs:attribute name="trackName" type="xs:string"/>
					          <xs:attribute name="pageRef" type="xs:integer"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="srt" type="yesNoType" use="optional" default="y"/>
		    <xs:attribute name="size" type="playerSize"/>
		    <xs:attribute name="autoScroll" type="yesNoType" default="n">
			      <xs:annotation>
				        <xs:documentation>Follow the subtitles (scroll) as the audio plays - default "n" if missing</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="autoCC" type="yesNoType" use="optional" default="n">
			      <xs:annotation>
				        <xs:documentation>Automatically open the CC panel when play is pressed</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="openCC" type="yesNoType" use="optional" default="n">
			      <xs:annotation>
				        <xs:documentation>Automatically open the CC panel when activity is loaded</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="title" use="optional"/>
		    <xs:attribute name="recording" type="yesNoType" use="optional"/>
		    <xs:attribute name="srtSrc" type="xs:string" use="optional"/>
		    <xs:attribute name="a11yTitle" type="xs:string" use="optional">
			      <xs:annotation>
				        <xs:documentation>Accessibility title which will be added as a aria-label attribute to the div containing the audio player</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="lang" type="languageType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Language of the audio track, which is added as a lang attribute to div with audioScript</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="a11yTitleLang" type="languageType" use="optional">
			      <xs:annotation>
				        <xs:documentation>
					Accessibility title language which will be added as a lang attribute to the span containing the audio player
				</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="subtitleLineType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="basicFormattingType">
				        <xs:attribute name="speaker" type="xs:string" use="optional"/>
				        <xs:attribute name="numSecs" type="xs:string" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="audioDialogType" mixed="true">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="subtitles">
				        <xs:complexType>
					          <xs:sequence maxOccurs="unbounded">
						            <xs:element name="subtitle" type="subtitleLineType"/>
					          </xs:sequence>
					          <xs:attribute name="id" type="xs:string" use="required">
						            <xs:annotation>
							              <xs:documentation>
								The 'id' of a subtitles element should match up to the 'src' value of a corresponding *audio* element
							</xs:documentation>
						            </xs:annotation>
					          </xs:attribute>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="complexVideoType">
		    <xs:annotation>
			      <xs:documentation>New Video Type to encapsulate the 'Plyr' video player</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="track" minOccurs="0" maxOccurs="unbounded">
				        <xs:complexType mixed="false">
					          <xs:attribute name="label" type="nonEmptyString" use="required"/>
					          <xs:attribute name="srclang" type="nonEmptyString" use="required"/>
					          <xs:attribute name="src" type="nonEmptyString" use="required"/>
					          <xs:attribute name="kind" use="optional">
						            <xs:simpleType>
							              <xs:restriction base="nonEmptyString">
								                <xs:enumeration value="captions"/>
								                <xs:enumeration value="descriptions"/>
							              </xs:restriction>
						            </xs:simpleType>
					          </xs:attribute>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>

		    <xs:attribute name="switchVideo" type="yesNoType" use="optional" default="y">
			      <xs:annotation>
				        <xs:documentation>DEPRECATED - By default, the RCF will look for 'src'-HD or 'src'-SD depending on whether you are on a mobile/tablet, or desktop maching. Setting this to 'N' will just make the RCF look for 'src'.mp4
				</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="src" type="noSpaceType" use="required"/>
		    <xs:attribute name="streamingSrc" type="noSpaceType" use="optional">
			      <xs:annotation>
				        <xs:documentation>
					URL for streaming HLS video - if provided, will be used in place of the 'src' attribute
				</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="title" use="optional"/>
		    <xs:attribute name="a11yTitle" type="xs:string" use="optional">
			      <xs:annotation>
				        <xs:documentation>Accessibility title which will be added as a aria-label attribute to the div containing the audio player</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="simpleImageType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Simple image type which has @src and @title attributes</xs:documentation>
		    </xs:annotation>
		    <xs:all>
			      <xs:element name="caption" type="imageCaptionComplexType" minOccurs="0"/>
			      <xs:element name="description" type="imageDescriptionType" minOccurs="0"/>
		    </xs:all>
		    <xs:attribute name="src" type="noSpaceType" use="required"/>
		    <xs:attribute name="title" use="optional"/>
		    <xs:attribute name="a11yTitle" use="optional"/>
		    <xs:attribute name="a11yTitleLang" type="languageType" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="panzoom" type="panzoomType" use="optional"/>
		    <xs:attribute name="decorative" type="yesNoType" use="optional"/>
		    <xs:attributeGroup ref="rcfTriggerableAttributes"/>
	  </xs:complexType>
   <xs:complexType name="imageCaptionComplexType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>An image caption can contain formattingElements</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="type" type="imageCaptionType" use="optional"/>
		    <xs:attribute name="lang" type="languageType"/>
	  </xs:complexType>
   <xs:complexType name="imageDescriptionType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>An image description can contain formattingElements</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="lang" type="languageType"/>
	  </xs:complexType>
   <xs:complexType name="imageAudioType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>image audio type - an image which will play audio when clicked</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="1">
			      <xs:element name="caption">
				        <xs:complexType mixed="true">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="formattingElements" minOccurs="0"/>
						            <xs:element ref="sSpan" minOccurs="0"/>
						            <xs:element ref="colourText" minOccurs="0"/>
					          </xs:choice>
					          <xs:attribute name="type" type="imageCaptionType" use="optional"/>
					          <xs:attribute name="lang" type="languageType"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:choice>
		    <xs:attribute name="src" type="noSpaceType" use="required"/>
		    <xs:attribute name="title" use="optional"/>
		    <xs:attribute name="a11yTitle" use="optional"/>
		    <xs:attribute name="a11yTitleLang" type="languageType" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="audio" type="noSpaceType" use="required"/>
		    <xs:attribute name="decorative" type="yesNoType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="orderingType">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="item" minOccurs="2" maxOccurs="unbounded">
						            <xs:complexType>
							              <xs:complexContent>
								                <xs:extension base="multiMediaItemRankedType">
									                  <xs:attribute name="fixed" type="yesNoType" use="optional" default="n"/>
								                </xs:extension>
							              </xs:complexContent>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="suffix" minOccurs="0" maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="feedback" type="yesNoType" default="n" use="optional">
					          <xs:annotation>
						            <xs:documentation>Give automatic feedback on each item as they are reordered (ordering / complexOrdering)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="display" type="displayType">
					          <xs:annotation>
						            <xs:documentation>Display the item type 'h'orizonally (inline) or 'v'ertically (block)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mobileDisplay" type="displayType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Display the item type 'h'orizonally (inline) or 'v'ertically (block) on mobile devices - uses 'display' attribute as fallback if missing</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" type="markingType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Mark the Ordering items as one point (item) - default, or individually (list)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="complexOrderingType">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="items">
						            <xs:complexType>
							              <xs:choice minOccurs="1" maxOccurs="unbounded">
								                <xs:element name="item" minOccurs="2" maxOccurs="unbounded">
									                  <xs:complexType>
										                    <xs:complexContent>
											                      <xs:extension base="multiMediaItemRankedType">
												                        <xs:attribute name="fixed" type="yesNoType" use="optional" default="n"/>
											                      </xs:extension>
										                    </xs:complexContent>
									                  </xs:complexType>
								                </xs:element>
								                <xs:element name="suffix" minOccurs="0" maxOccurs="1"/>
							              </xs:choice>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="alternativeOrderings">
						            <xs:complexType>
							              <xs:choice minOccurs="1" maxOccurs="unbounded">
								                <xs:element name="order">
									                  <xs:complexType mixed="false">
										                    <xs:sequence minOccurs="1" maxOccurs="unbounded">
											                      <xs:element name="item">
												                        <xs:complexType mixed="false">
													                          <xs:attribute name="id" type="xs:string" use="required"/>
												                        </xs:complexType>
											                      </xs:element>
											                      <xs:element name="suffix" minOccurs="0" maxOccurs="1"/>
										                    </xs:sequence>
									                  </xs:complexType>
									                  <xs:unique name="alternativeOrderingsOrderItemUnique">
										                    <xs:selector xpath="item"/>
										                    <xs:field xpath="@id"/>
									                  </xs:unique>
								                </xs:element>
							              </xs:choice>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="feedback" type="yesNoType" default="n" use="optional">
					          <xs:annotation>
						            <xs:documentation>Give automatic feedback on each item as they are reordered (ordering / complexOrdering)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="display" type="displayType">
					          <xs:annotation>
						            <xs:documentation>Display the item type 'h'orizonally (inline) or 'v'ertically (block)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mobileDisplay" type="displayType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Display the item type 'h'orizonally (inline) or 'v'ertically (block) on mobile devices - uses 'display' attribute as fallback if missing</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" use="optional">
					          <xs:annotation>
						            <xs:documentation>Mark type for the complexOrdering items - only 'list' is supported (by default if missing) at the moment</xs:documentation>
					          </xs:annotation>
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="list"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="inlineOrderingType">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="item" minOccurs="2" maxOccurs="unbounded">
						            <xs:complexType>
							              <xs:complexContent>
								                <xs:extension base="formattedItemRankedType">
									                  <xs:attribute name="fixed" type="yesNoType" use="optional" default="n"/>
								                </xs:extension>
							              </xs:complexContent>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="suffix" minOccurs="0" maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="feedback" type="yesNoType" default="n" use="optional">
					          <xs:annotation>
						            <xs:documentation>Give automatic feedback on each item as they are reordered (ordering / complexOrdering)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" type="markingType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Mark the Ordering items as one point (item) - default, or individually (list)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="pelmanismType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="cards">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="pair" minOccurs="3" maxOccurs="unbounded">
									                  <xs:annotation>
										                    <xs:documentation>
											Definitions for all the cards (pairs) available for the pelmanism to use - a random selection of these pairs is used in the generated Pelmanism
										</xs:documentation>
									                  </xs:annotation>
									                  <xs:complexType>
										                    <xs:sequence>
											                      <xs:element name="card" type="cardType" minOccurs="2" maxOccurs="2"/>
										                    </xs:sequence>
										                    <xs:attribute name="class" type="pairClassPattern" use="required"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="numPairs" use="optional">
					          <xs:annotation>
						            <xs:documentation>Number of pairs of cards to use in the pelmanism - a random selection of cards is chosen from the pelmanism 'cards/pairs' elements</xs:documentation>
					          </xs:annotation>
					          <xs:simpleType>
						            <xs:restriction base="xs:integer">
							              <xs:minInclusive value="3"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="flipBackDelay" use="optional" default="1200">
					          <xs:annotation>
						            <xs:documentation>Number of *millliseconds* to wait until an incorrect pair of cards are flipped back over</xs:documentation>
					          </xs:annotation>
					          <xs:simpleType>
						            <xs:restriction base="xs:integer">
							              <xs:minInclusive value="500"/>
							              <xs:maxInclusive value="5000"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <xs:attribute name="timeLimit" type="rcfInteger" use="optional">
					          <xs:annotation>
						            <xs:documentation>Number of seconds allowed to complete the pelmanism - if missing or '0' then no limit is used</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="showAttempts" type="yesNoType" use="optional" default="y"/>
				        <xs:attribute name="reorderAnswers"
                          type="yesNoType"
                          use="optional"
                          default="n"/>
				        <xs:attribute name="reshuffleButton"
                          type="yesNoType"
                          use="optional"
                          default="n">
					          <xs:annotation>
						            <xs:documentation>A button that lets the user replay the game</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="cardType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="block"
                     type="cardBlockType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:element name="feedback"
                     type="feedbackType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="audio" type="noSpaceType" use="optional"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
		    <xs:attribute name="class" type="cardClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="cardBlockType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="block"
                     type="cardBlockType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:element name="feedback"
                     type="feedbackType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:element name="h1" type="simpleBlockElementsType"/>
			      <xs:element name="h2" type="simpleBlockElementsType"/>
			      <xs:element name="h3" type="simpleBlockElementsType"/>
			      <xs:element name="h4" type="simpleBlockElementsType"/>
			      <xs:element name="h5" type="simpleBlockElementsType"/>
			      <xs:element name="h6" type="simpleBlockElementsType"/>
			      <xs:element name="p" type="simpleBlockElementsType"/>
			      <xs:element name="list" type="basicListType"/>
			      <!-- -->
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="positioningType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="item" minOccurs="2" maxOccurs="unbounded">
						            <xs:complexType>
							              <xs:complexContent>
								                <xs:extension base="multiMediaItemRankedType">
									                  <xs:attribute name="positionable" type="yesNoType" use="optional" default="n"/>
								                </xs:extension>
							              </xs:complexContent>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="display" type="displayType">
					          <xs:annotation>
						            <xs:documentation>Display the item type 'h'orizonally (inline) or 'v'ertically (block)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mobileDisplay" type="displayType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Display the item type 'h'orizonally (inline) or 'v'ertically (block) on mobile devices - uses 'display' attribute as fallback if missing</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" type="positioningMarkType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Always mark the Positioning items as one point (list)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
			      <!--
			devbliss cannot handle a 'mark=item' on a positioning - there is no 'match' for it in their marking schema - would be quite a substantial amount of work on both sides to implement it.
			-->
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="radioListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>radioListType - a list of items (with 'correct' attributes), with a 'display type'</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="feedbackMediaItemCorrectListType">
				        <xs:attribute name="id" type="xs:string" use="required"/>
				        <xs:attribute name="name" use="optional"/>
				        <xs:attribute name="displayType" type="radioListDisplayStyle" use="optional"/>
				        <xs:attribute name="start" type="xs:integer" use="optional"/>
				        <xs:attribute name="reversed" type="yesNoType" use="optional"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        <xs:attribute name="example" type="exampleType" use="optional"/>
				        <xs:attribute name="marked" type="yesNoType" use="optional" default="y"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="dropdownType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>dropdown - a list of items with 'correct' attributes and a 'disabled' attribute
			</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="prefix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
					          <xs:element name="item" type="itemCorrectType" maxOccurs="unbounded"/>
					          <xs:element name="suffix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
				        </xs:sequence>
				        <xs:attribute name="type" type="listDisplayType"/>
				        <xs:attribute name="disabled" type="yesNoType" use="optional">
					          <xs:annotation>
						            <xs:documentation>the disabled attribute no longer affects the content due to RCF-10994 – we decided to keep it in place for legacy content</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="typeInType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:annotation>
					          <xs:documentation>The base 'typein' element contains a list of all the possible answers in all the possible spellings acceptable</xs:documentation>
				        </xs:annotation>
				        <xs:sequence>
					          <xs:element name="prefix" type="xs:string" minOccurs="0"/>
					          <xs:element name="preset" type="nonEmptyString" minOccurs="0"/>
					          <xs:element name="acceptable">
						            <xs:complexType mixed="false">
							              <xs:annotation>
								                <xs:documentation>acceptable answers for the TypeIn - the program will check this list against the typed answer (case insensitive) and mark as correct/wrong as applicable</xs:documentation>
							              </xs:annotation>
							              <xs:sequence>
								                <xs:element name="item" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
						            <xs:unique name="acceptableTypeInItemDUnique">
							              <xs:selector xpath=".//item"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
					          <xs:element name="suffix" type="xs:string" minOccurs="0"/>
					          <xs:element name="hint" type="xs:string" minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="caseSensitive" type="yesNoType">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the generated HTML should be case sensitive when checking the answers entered by the user</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="expandAnswers" type="yesNoType" default="n">
					          <xs:annotation>
						            <xs:documentation>All available answers will be generated from the acceptable/item[0] answer token string if set to 'Y', otherwise the 'acceptable/item' answers will be used
						</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="restrict" type="yesNoType" default="n" use="optional">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the output 'input element' in the html has a 'maxlength' attribute set to the length of the longest acceptable answer
						</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="ignorePunctuation"
                          type="yesNoType"
                          default="n"
                          use="optional">
					          <xs:annotation>
					 	           <xs:documentation>Specifies whether the user answer will be stripped of punctuation characters and compared against the similarly stripped provided answers</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="multiLineTypeInType">
		    <xs:annotation>
			      <xs:documentation>The base 'multi-line' typein - can be case sensitive if required</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">

				        <xs:sequence minOccurs="1">
					          <xs:element name="preset" type="nonEmptyString" minOccurs="0"/>
					          <xs:element name="acceptable">
						            <xs:complexType mixed="false">
							              <xs:annotation>
								                <xs:documentation>acceptable answers for the MultiLine TypeIn - the program will check this list against the typed answer (case insensitive) and mark as correct/wrong as applicable</xs:documentation>
							              </xs:annotation>
							              <xs:sequence>
								                <xs:element name="item" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
						            <xs:unique name="ml-acceptableTypeInItemDUnique">
							              <xs:selector xpath=".//item"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="caseSensitive" type="yesNoType">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the generated HTML should be case sensitive when checking the answers entered by</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="expandAnswers" type="yesNoType" default="n">
					          <xs:annotation>
						            <xs:documentation>All available answers will be generated from the acceptable/item[0] answer token string if set to 'Y', otherwise the 'acceptable/item' answers will be used
						</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="limit" type="yesNoType" default="n" use="optional">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the output 'input element' in the html has a 'maxlength' attribute set to the length of the longest acceptable answer
						</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="ignorePunctuation"
                          type="yesNoType"
                          default="n"
                          use="optional">
					          <xs:annotation>
					 	           <xs:documentation>Specifies whether the user answer will be stripped of punctuation characters and compared against the similarly stripped provided answers</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="typeInTextType">
		    <xs:complexContent>
			      <xs:extension base="typeInType">
				        <xs:annotation>
					          <xs:documentation>The 'typein' element contains a list of all the possible answers in all the possible spellings acceptable</xs:documentation>
				        </xs:annotation>
				        <xs:attribute name="example" type="exampleType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="markableTypeInTextType">
		    <xs:complexContent>
			      <xs:extension base="typeInTextType">
				        <xs:annotation>
					          <xs:documentation>TypeIn type with a 'marked' attribute</xs:documentation>
				        </xs:annotation>
				        <xs:attribute name="marked" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="resizableMarkableTypeInTextType">
		    <xs:complexContent>
			      <xs:extension base="markableTypeInTextType">
				        <xs:attribute name="resize" type="typeinResizeType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the typein will resize to it's longest acceptable answer or the longest acceptable answer in the entire containing activity (default behavior)</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="typeinGroupType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="formattingElements"/>
					          <!-- typein group span -->
					          <xs:element name="tSpan">
						            <xs:annotation>
							              <xs:documentation>'span' element for inside typein group elements - only allows simple formatting and further typein elements</xs:documentation>
						            </xs:annotation>
						            <xs:complexType mixed="true">
							              <xs:complexContent>
								                <xs:extension base="rcfFormattingObject">
									                  <xs:choice minOccurs="0" maxOccurs="unbounded">
										                    <xs:group ref="formattingElements"/>
										                    <xs:element name="typein" type="typeInTextType"/>
									                  </xs:choice>
									                  <xs:attribute name="lang" type="languageType" use="optional"/>
								                </xs:extension>
							              </xs:complexContent>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="typein" type="typeInTextType"/>
				        </xs:choice>
				        <xs:attribute name="caseSensitive" type="yesNoType">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the generated HTML should be case sensitive when checking the answers entered by the user</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="unmarkedTextInputType">
		    <xs:annotation>
			      <xs:documentation>Allows text input fields which are *not* marked to be used in an activity</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="required" type="yesNoType" use="optional"/>
				        <xs:attribute name="markedByTeacher"
                          type="yesNoType"
                          use="optional"
                          default="n"/>
				        <xs:attribute name="maxChar" type="xs:nonNegativeInteger" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="unmarkedMultiLineTextInputType">
		    <xs:annotation>
			      <xs:documentation>Allows multiple line text input fields which are *not* marked to be used in an activity</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="required" type="yesNoType" use="optional"/>
				        <xs:attribute name="markedByTeacher"
                          type="yesNoType"
                          use="optional"
                          default="n"/>
				        <xs:attribute name="maxChar" type="xs:nonNegativeInteger" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="verticalCrosswordType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence minOccurs="1">
					          <xs:element name="word" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:attribute name="id" type="nonEmptyString" use="required"/>
							              <xs:attribute name="letter" type="nonEmptyString" use="required"/>
							              <xs:attribute name="example" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>

					          <xs:element name="clues" maxOccurs="1" minOccurs="0">
						            <xs:complexType>
							              <xs:sequence minOccurs="1" maxOccurs="unbounded">
								                <xs:element name="clue">
									                  <xs:complexType>
										                    <xs:complexContent>
											                      <xs:extension base="formattedItemType">
												                        <xs:attribute name="id" type="nonEmptyString" use="required"/>
												                        <xs:attribute name="wordId" type="nonEmptyString" use="required"/>
											                      </xs:extension>
										                    </xs:complexContent>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>

					          <xs:element name="crossingWordClue" minOccurs="0" maxOccurs="1">
						            <xs:annotation>
							              <xs:documentation>
								This element is used to specify the clue for the crossing word. It *must* have a crossingWord element as this is
								output in the generated HTML and is dynamically updated to show the crossing word as the vertical crossword is attempted.
							</xs:documentation>
						            </xs:annotation>
						            <xs:complexType mixed="true">
							              <xs:sequence>
								                <xs:group ref="formattingElements" minOccurs="0" maxOccurs="unbounded"/>
								                <xs:element name="crossingWord" minOccurs="1" maxOccurs="1"/>
								                <xs:group ref="formattingElements" minOccurs="0" maxOccurs="unbounded"/>
							              </xs:sequence>
							              <xs:attribute name="label" type="nonEmptyString" use="optional">
								                <xs:annotation>
									                  <xs:documentation>
										This attribute is used to specify the label for the crossing word clue.
									</xs:documentation>
								                </xs:annotation>
							              </xs:attribute>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>

				        <xs:attribute name="caseSensitive" type="yesNoType"/>
				        <xs:attribute name="exampleCrossingWord" type="yesNoType" use="optional"/>
				        <xs:attribute name="firstLetterExample" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="wordSnakeType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="words">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="word" maxOccurs="unbounded">
									                  <xs:complexType mixed="true">
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
										                    <xs:attribute name="example" type="exampleType" use="optional" default="n"/>
										                    <xs:attribute name="distractor" type="yesNoType" use="optional" default="n"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="interactive" type="yesNoType" use="optional">
					          <xs:annotation>
						            <xs:documentation>Is wordsnake interactive ? default 'y', setting to 'n' will disable all 'selection' logic in the wordsnake</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="clickStick" type="yesNoType" use="optional" default="n">
					          <xs:annotation>
						            <xs:documentation>Override the 'draggable' behavior on desktop and always have the interaction in 'click-stick' mode</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="movingTargetsType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="targets" minOccurs="1" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="target" maxOccurs="unbounded">
									                  <xs:complexType>
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
										                    <xs:attribute name="audio" type="nonEmptyString" use="required"/>
										                    <xs:attribute name="image" type="nonEmptyString" use="required"/>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
 					         <xs:element name="assets" minOccurs="1" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="scenery" minOccurs="1" maxOccurs="1">
									                  <xs:complexType>
										                    <xs:sequence>
											                      <xs:element name="sceneBackground"
                                             type="movingAssetImageType"
                                             minOccurs="0"
                                             maxOccurs="1"/>
											                      <xs:element name="targetBackground"
                                             type="movingAssetImageType"
                                             minOccurs="0"
                                             maxOccurs="1"/>
											                      <xs:element name="foreground"
                                             type="bouncingMovingAssetImageType"
                                             minOccurs="0"
                                             maxOccurs="1"/>
											                      <xs:element name="crosshairs"
                                             type="targetAssetImageType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
											                      <xs:element name="transparentTarget"
                                             type="targetAssetImageType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
											                      <xs:element name="clueButton"
                                             type="targetAssetImageType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
										                    </xs:sequence>
									                  </xs:complexType>
								                </xs:element>
								                <xs:element name="audio" minOccurs="1" maxOccurs="1">
									                  <xs:complexType>
										                    <xs:sequence>
											                      <xs:element name="success"
                                             type="targetAssetAudioType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
											                      <xs:element name="fail"
                                             type="targetAssetAudioType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
											                      <xs:element name="gameover"
                                             type="targetAssetAudioType"
                                             minOccurs="1"
                                             maxOccurs="1"/>
										                    </xs:sequence>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="speed" default="100" use="optional">
					          <xs:simpleType>
						            <xs:restriction base="xs:integer">
							              <xs:minInclusive value="100"/>
							              <xs:maxInclusive value="200"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="targetAssetImageType">
		    <xs:attribute name="image" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="movingAssetImageType">
		    <xs:complexContent>
			      <xs:extension base="targetAssetImageType">
				        <xs:attribute name="moving" type="yesNoType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="bouncingMovingAssetImageType">
		    <xs:complexContent>
			      <xs:extension base="movingAssetImageType">
				        <xs:attribute name="bounce" type="yesNoType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="targetAssetAudioType">
		    <xs:attribute name="src" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="compositeSceneType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="audioAssets" minOccurs="1" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="gamestart"
                                    type="compositeSceneAudioAssetType"
                                    minOccurs="0"
                                    maxOccurs="1"/>
								                <xs:element name="incorrect"
                                    type="compositeSceneAudioAssetType"
                                    minOccurs="1"
                                    maxOccurs="1"/>
								                <xs:element name="gameover"
                                    type="compositeSceneAudioAssetType"
                                    minOccurs="0"
                                    maxOccurs="1"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>

					          <xs:element name="items">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    minOccurs="1"
                                    maxOccurs="unbounded"
                                    type="compositeSceneItemType"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="backgroundImage" type="nonEmptyString" use="required"/>
				        <xs:attribute name="playClueButtonLabel" type="xs:string" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="compositeSceneItemType">
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="class" type="userClassPattern" use="required"/>
		    <xs:attribute name="image" type="nonEmptyString" use="required"/>
		    <xs:attribute name="audioClue" type="nonEmptyString" use="required"/>
		    <xs:attribute name="correctAudio" type="nonEmptyString" use="required"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="compositeSceneImageAssetType">
		    <xs:attribute name="image" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="compositeSceneAudioAssetType">
		    <xs:attribute name="src" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="colouringType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="audioAssets" minOccurs="1" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="gamestart"
                                    type="colouringAudioAssetType"
                                    minOccurs="0"
                                    maxOccurs="1"/>
								                <xs:element name="correct"
                                    type="colouringAudioAssetType"
                                    minOccurs="1"
                                    maxOccurs="1"/>
								                <xs:element name="incorrect"
                                    type="colouringAudioAssetType"
                                    minOccurs="1"
                                    maxOccurs="1"/>
								                <xs:element name="gameover"
                                    type="colouringAudioAssetType"
                                    minOccurs="0"
                                    maxOccurs="1"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>

					          <xs:element name="colours">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="colour"
                                    minOccurs="1"
                                    maxOccurs="unbounded"
                                    type="colouringColourType"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>

					          <xs:element name="items">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item"
                                    minOccurs="1"
                                    maxOccurs="unbounded"
                                    type="colouringItemType"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="playClueButtonLabel" type="xs:string" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="colouringColourType">
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="image" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="colouringItemType">
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="correctColour" type="xs:string" use="required"/>

		    <xs:attribute name="image" type="nonEmptyString" use="required"/>
		    <xs:attribute name="correctImage" type="nonEmptyString" use="required"/>
		    <xs:attribute name="audioClue" type="nonEmptyString" use="required"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="colouringAudioAssetType">
		    <xs:attribute name="src" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="listenAndColourType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="audio" type="listenAndColourAudioAssetType" minOccurs="0"/>
					          <xs:element name="colourPalette" type="listenAndColourPaletteType"/>
					          <xs:element name="itemGroups" type="listenAndColourItemGroupsType"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="listenAndColourPaletteType">
		    <xs:sequence>
			      <xs:element name="colour" minOccurs="1" maxOccurs="unbounded">
				        <xs:complexType mixed="false">
					          <xs:attribute name="name" type="nonEmptyString" use="required"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>

	  </xs:complexType>
   <xs:complexType name="listenAndColourItemGroupsType">
		    <xs:sequence>
			      <xs:element name="items"
                     type="listenAndColourItemGroupsItemsType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="svg" type="nonEmptyString" use="required">
			      <xs:annotation>
				        <xs:documentation>The svg (from the level assets url) to be used in this listenAndColour interaction</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="listenAndColourItemGroupsItemsType">
		    <xs:sequence>
			      <xs:element name="item"
                     type="listenAndColourItemsGroupItemsItemType"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required">
			      <xs:annotation>
				        <xs:documentation>points to the ID in the associated SVG to be coloured</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="correctColour" type="nonEmptyString" use="optional">
			      <xs:annotation>
				        <xs:documentation>the correct colour class to be marked against in the svg</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="distractor" type="yesNoType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="listenAndColourItemsGroupItemsItemType">
		    <xs:attribute name="name" type="svgLinkedId" use="required">
			      <xs:annotation>
				        <xs:documentation>The svg group id to be associated with this item</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="example" type="yesNoType"/>
	  </xs:complexType>
   <xs:complexType name="listenAndColourAudioAssetType">
		    <xs:attribute name="src" type="nonEmptyString" use="required"/>
		    <xs:attribute name="srt" type="yesNoType" use="optional" default="n"/>
		    <xs:attribute name="srtSrc" type="xs:string" use="optional"/>
		    <xs:attribute name="a11yTitle" type="xs:string" use="optional">
			      <xs:annotation>
				        <xs:documentation>Accessibility title which will be added as a aria-label attribute to the div containing the audio player</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:complexType>
   <xs:complexType name="balloonsGameType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="alternativeSprite"
                           type="balloonsAlternativeSpriteType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="items"
                           type="balloonsGameItemsType"
                           minOccurs="1"
                           maxOccurs="1"/>
					          <xs:element name="distractors"
                           type="balloonsGameDistractorsType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="questions"
                           type="balloonsQuestionsType"
                           minOccurs="1"
                           maxOccurs="1"/>
					          <xs:element name="assets"
                           type="balloonsGameAssetsType"
                           minOccurs="0"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
                <xs:attribute name="missedBalloonPenalty" type="yesNoType"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="balloonsAlternativeSpriteType">
		    <xs:attribute name="sharedAsset" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="balloonsGameItemsType">
		    <xs:sequence>
			      <xs:element name="item"
                     type="balloonGamesItemType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="balloonsGameDistractorsType">
		    <xs:sequence>
			      <xs:element name="item"
                     type="balloonGamesItemType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="balloonGamesItemType">
		    <xs:complexContent mixed="true">
			      <xs:extension base="rcfInteraction">
				        <xs:attribute name="image" type="nonEmptyString" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="balloonsQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="balloonsQuestionType"
                     minOccurs="1"
                     maxOccurs="unbounded">
				        <xs:unique name="balloonsGameQuestionItemIdUnique">
					          <xs:selector xpath="item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="play" type="rcfInteger" use="optional"/>
		    <xs:attribute name="correct" type="balloonQuestionsCorrectType" use="required"/>
		    <xs:attribute name="baseSpeed" type="minMaxInteger" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="balloonsQuestionType">
		    <xs:sequence>
			      <xs:element name="prompt" type="activityPrompt" minOccurs="1" maxOccurs="1"/>
			      <xs:element name="item"
                     type="balloonsQuestionItemType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="balloonsQuestionItemType">
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="balloonsGameAssetsType">
		    <xs:sequence>
			      <xs:element name="scenery"
                     minOccurs="0"
                     maxOccurs="1"
                     type="balloonGamesAssetsSceneryType"/>
			      <xs:element name="audio"
                     minOccurs="0"
                     maxOccurs="1"
                     type="balloonGamesAssetsAudioType"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="balloonGamesAssetsSceneryType">
		    <xs:sequence>
			      <xs:element name="sceneBackground"
                     type="movingAssetsImageType"
                     minOccurs="0"
                     maxOccurs="1"/>
			      <xs:element name="foreground"
                     type="repeatingAssetImageType"
                     minOccurs="0"
                     maxOccurs="1"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="balloonGamesAssetsAudioType">
		    <xs:sequence>
			      <xs:element name="correctAudio"
                     type="balloonsAssetAudioType"
                     minOccurs="0"
                     maxOccurs="1"/>
			      <xs:element name="wrongAudio"
                     type="balloonsAssetAudioType"
                     minOccurs="0"
                     maxOccurs="1"/>
			      <xs:element name="gameoverAudio"
                     type="balloonsAssetAudioType"
                     minOccurs="0"
                     maxOccurs="1"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="balloonAssetImageType">
		    <xs:attribute name="image" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="movingAssetsImageType">
		    <xs:complexContent>
			      <xs:extension base="balloonAssetImageType">
				        <xs:attribute name="moving" type="yesNoType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="repeatingAssetImageType">
		    <xs:complexContent>
			      <xs:extension base="balloonAssetImageType">
				        <xs:attribute name="repeat" type="yesNoType" use="optional" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="balloonsAssetAudioType">
		    <xs:attribute name="src" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="feedbackWritingType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Writing Interaction Type used with the RCF activityMode / feedback modes</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="presetAnswer"
                           type="xs:string"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="answerModel"
                           type="writingAnswerModelType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="markingGuidance"
                           type="writingMarkingGuidanceType"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="markedByTeacher"
                          type="yesType"
                          use="optional"
                          default="y"/>
				        <xs:attribute name="maxChar" type="xs:nonNegativeInteger" use="optional"/>
				        <xs:attribute name="printWritingLines" use="optional">
					          <xs:simpleType>
						            <xs:restriction base="xs:integer">
							              <xs:minInclusive value="1"/>
							              <xs:maxInclusive value="10"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="writingAnswerModelType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				Added in RCF-9111 - this adds a new optional element to the writing interaction, which allows
				a block of formatted content to be displayed when the activity is set to a certain mode

				The html will always output this content inside a paragraph element
			</xs:documentation>
		    </xs:annotation>

		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>

	  </xs:complexType>
   <xs:complexType name="writingMarkingGuidanceType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="wordSearchType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteraction">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="words" type="wordSearchWordsType"/>
				        </xs:sequence>
				        <xs:attributeGroup ref="wordSearchAttributes"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="wordSearchWordsType">
		    <xs:sequence minOccurs="1" maxOccurs="1">
			      <xs:element name="word" type="wordSearchWordType" maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="wordSearchWordType">
		    <xs:simpleContent>
			      <xs:extension base="wordType">
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="example" type="exampleType"/>
			      </xs:extension>
		    </xs:simpleContent>
	  </xs:complexType>
   <xs:complexType name="fixedWordSearchType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteraction">
				        <xs:sequence minOccurs="1" maxOccurs="1">
					          <xs:element name="wordSearchGrid" type="fixedWordSearchGridType"/>
					          <xs:element name="words" type="fixedWordSearchWordsType"/>
				        </xs:sequence>
				        <xs:attributeGroup ref="fixedWordSearchAttributes"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fixedWordSearchGridType">
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:element name="row" type="xs:token"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="fixedWordSearchWordsType">
		    <xs:sequence minOccurs="1" maxOccurs="1">
			      <xs:element name="word" type="fixedWordSearchWordType" maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="fixedWordSearchWordType">
		    <xs:simpleContent>
			      <xs:extension base="wordType">
				        <xs:attribute name="id" type="nonEmptyString" use="required"/>
				        <xs:attribute name="example" type="exampleType"/>
				        <xs:attribute name="startRow" type="xs:nonNegativeInteger" use="required"/>
				        <xs:attribute name="startCol" type="xs:nonNegativeInteger" use="required"/>
				        <xs:attribute name="direction" type="fixedWordSearchDirectionType" use="required"/>
			      </xs:extension>
		    </xs:simpleContent>
	  </xs:complexType>
   <xs:complexType name="feedbackRecordingType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Open Gradable Recording Type used with the RCF activityMode / feedback modes</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="markingGuidance"
                           type="recordingMarkingGuidanceType"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="markedByTeacher"
                          type="yesNoType"
                          use="optional"
                          default="y"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="recordingMarkingGuidanceType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="speakersListType">
		    <xs:annotation>
			      <xs:documentation>Definition for the speakersList element which defines a list of speakers in the story</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="speaker"
                     type="speakerType"
                     maxOccurs="unbounded"
                     minOccurs="1"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="speakerType">
		    <xs:annotation>
			      <xs:documentation>Definition for the speaker element which defines a speaker in the story</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="baseStoryElement">
					       <xs:attribute name="name" type="nonEmptyString" use="optional"/>
					       <xs:attribute name="avatar" type="noSpaceType" use="optional"/>
					       <xs:attribute name="bubbleColour" type="wordType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="coverType">
		    <xs:annotation>
			      <xs:documentation>The cover element for a PBF story element</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="baseStoryElement">
				        <xs:attribute name="image" type="noSpaceType" use="required"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="sceneType">
		    <xs:complexContent>
			      <xs:extension base="baseStoryElement">
				        <xs:sequence>
					          <xs:element name="sceneAudio"
                           type="sceneAudioType"
                           maxOccurs="1"
                           minOccurs="0"/>
					          <xs:element name="speech"
                           type="sceneSpeechType"
                           maxOccurs="unbounded"
                           minOccurs="0"/>
					          <xs:element name="questions"
                           type="storyQuestionsType"
                           maxOccurs="1"
                           minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="image" type="noSpaceType" use="required"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="sceneSpeechType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="baseStoryElement">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="formattingElements"/>
					          <xs:element ref="sSpan"/>
					          <xs:element ref="colourText" minOccurs="0"/>
				        </xs:choice>
				        <xs:attribute name="type" type="sceneSpeechTypeValue" use="required"/>
				        <xs:attribute name="audio" type="noSpaceType" use="optional"/>
				        <xs:attribute name="x" type="xs:short" use="required"/>
				        <xs:attribute name="y" type="xs:short" use="required"/>
				        <xs:attribute name="tip" type="speechTipType" use="optional"/>
				        <xs:attribute name="delayBefore" type="xs:short" use="optional"/>
				        <xs:attribute name="delayAfter" type="xs:short" use="optional"/>
				        <xs:attribute name="speakerId" type="nonEmptyString" use="optional"/>
				        <xs:attribute name="side" type="speakerSideType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="storyQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="storyQuestionType"
                     maxOccurs="1"
                     minOccurs="1"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="storyQuestionType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="prompt" type="activityPrompt" minOccurs="0" maxOccurs="1"/>
					          <xs:element ref="radio" minOccurs="0" maxOccurs="1"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="sceneAudioType">
		    <xs:attribute name="id" type="nonEmptyString"/>
		    <xs:attribute name="src" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="baseStoryElement" mixed="false">
		    <xs:annotation>
			      <xs:documentation>The 'base' definition for an element in the story, contains ID and CLASS attributes</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="sentenceBuilderType">
		<!-- extends rcfInteraction so can have id and class -->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					<!-- has items element -->
					          <xs:element name="items" type="sentenceBuilderItems"/>
					          <!-- has distractors element (optional) -->
					          <xs:element name="distractors"
                           type="sentenceBuilderDistractorItems"
                           minOccurs="0"/>
					          <!-- has alternativeAnswers element (optional) -->
					          <xs:element name="alternativeAnswers"
                           type="sentenceBuilderAlternativeAnswers"
                           minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="sentenceBuilderItems">
		    <xs:sequence>
			      <xs:element name="prefix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
			      <xs:element name="item"
                     type="sentenceBuilderItem"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
			      <xs:element name="suffix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="sentenceBuilderDistractorItems">
		    <xs:sequence>
			      <xs:element name="item"
                     type="sentenceBuilderDistractorItem"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="sentenceBuilderItem" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="fixed" type="yesNoType" use="optional" default="n"/>
	  </xs:complexType>
   <xs:complexType name="sentenceBuilderDistractorItem" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="sentenceBuilderAlternativeAnswers">
		    <xs:sequence>
			      <xs:element name="item"
                     type="nonEmptyString"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="wordInsertType">
		<!-- extends rcfInteraction so can have id and class -->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					<!-- has items element -->
					          <xs:element name="items" type="wordInsertItems"/>
					          <!-- has distractors element (optional) -->
					          <xs:element name="distractors" type="wordInsertItems" minOccurs="0"/>
					          <!-- has alternativeAnswers element (optional) -->
					          <xs:element name="alternativeAnswers"
                           type="wordInsertAlternativeAnswers"
                           minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="wordInsertItems">
		    <xs:sequence>
			      <xs:element name="prefix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
			      <xs:element name="item"
                     type="wordInsertItem"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
			      <xs:element name="suffix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="wordInsertItem" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="positionable" type="yesNoType" use="optional" default="n"/>
	  </xs:complexType>
   <xs:complexType name="wordInsertAlternativeAnswers">
		    <xs:sequence>
			      <xs:element name="item"
                     type="nonEmptyString"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="findInImageType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="scene" type="findInImageSceneType"/>
					          <xs:element name="items" type="findInImageItemsType"/>
					          <xs:element name="questions" type="findInImageQuestionsType"/>
				        </xs:sequence>
				        <xs:attribute name="mode" type="findInImageModeAttributeType" use="required"/>
				        <xs:attribute name="play" type="rcfInteger" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="findInImageSceneType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Scene element used in findInImage interaction</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="src" type="noSpaceType" use="required"/>
	  </xs:complexType>
   <xs:complexType name="findInImageItemsType" mixed="false">
		    <xs:sequence>
			      <xs:element name="item"
                     type="findInImageItemsItemType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="findInImageItemsItemType" mixed="false">
		    <xs:attribute name="id" type="svgLinkedId" use="required"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="findInImageQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="findInImageQuestionType"
                     minOccurs="1"
                     maxOccurs="unbounded">
				        <xs:unique name="findInImageQuestionItemIds">
					          <xs:selector xpath="item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="findInImageQuestionType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="prompt" type="activityPrompt" minOccurs="1" maxOccurs="1"/>
					          <xs:element name="item"
                           type="findInImageQuestionItemType"
                           minOccurs="1"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="findInImageQuestionItemType">
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazeType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="alternativeSprite"
                           type="sequenceTileMazeAlternativeSpriteType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="questions"
                           type="sequenceTileMazeQuestionsType"
                           minOccurs="1"
                           maxOccurs="1">
						            <xs:unique name="sequenceTileMazeQuestionIdUnique">
							              <xs:selector xpath="question"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="show" type="xs:integer" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazeAlternativeSpriteType">
		    <xs:attribute name="sharedAsset" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazeQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="sequenceTileMazeQuestionType"
                     minOccurs="1"
                     maxOccurs="unbounded">
				        <xs:unique name="sequenceTileMazeItemIdUnique">
					          <xs:selector xpath=".//item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
				        <xs:unique name="sequenceTileMazeQuestionStepIdUnique">
					          <xs:selector xpath="./path/step"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazeQuestionType">
		    <xs:sequence>
			      <xs:element name="prompt" type="activityPrompt" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="path"
                     type="sequenceTileMazePathType"
                     minOccurs="1"
                     maxOccurs="1"/>
			      <xs:element name="distractors"
                     type="sequenceTileMazeDistractorsType"
                     minOccurs="0"
                     maxOccurs="1"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazePathType">
		    <xs:sequence>
			      <xs:element name="step"
                     type="sequenceTileMazeStepType"
                     minOccurs="3"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazeStepType">
		    <xs:sequence>
			      <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
				        <xs:complexType>
					          <xs:simpleContent>
						            <xs:extension base="xs:string">
							              <xs:attribute name="id" type="nonEmptyString" use="required"/>
							              <xs:attribute name="correct" type="yesNoType" use="optional"/>
						            </xs:extension>
					          </xs:simpleContent>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="optional" type="yesNoType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="sequenceTileMazeDistractorsType">
		    <xs:sequence>
			      <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
				        <xs:complexType>
					          <xs:simpleContent>
						            <xs:extension base="xs:string">
							              <xs:attribute name="id" type="nonEmptyString" use="required"/>
						            </xs:extension>
					          </xs:simpleContent>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="categoriseTileMazeType" mixed="false">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="alternativeSprite"
                           type="categoriseTileMazeAlternativeSpriteType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="questions"
                           type="categoriseTileMazeQuestionsType"
                           minOccurs="1"
                           maxOccurs="1">
						            <xs:unique name="categoriseTileMazeQuestionIdUnique">
							              <xs:selector xpath="question"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="show" type="xs:integer" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="categoriseTileMazeAlternativeSpriteType">
		    <xs:attribute name="sharedAsset" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="categoriseTileMazeQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="categoriseTileMazeQuestionType"
                     minOccurs="1"
                     maxOccurs="unbounded">
				        <xs:unique name="categoriseTileMazeItemIdUnique">
					          <xs:selector xpath=".//item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
				        <xs:unique name="categoriseTileMazeQuestionItemIdUnique">
					          <xs:selector xpath="./categoryItems/item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="categoriseTileMazeQuestionType">
		    <xs:sequence>
			      <xs:element name="prompt" type="activityPrompt" minOccurs="1" maxOccurs="1"/>
			      <xs:element name="categoryItems"
                     type="categoriseTileMazeCategoryItemsType"
                     minOccurs="1"
                     maxOccurs="1"/>
			      <xs:element name="distractors"
                     type="categoriseTileMazeDistractorsType"
                     minOccurs="1"
                     maxOccurs="1"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="categoriseTileMazeCategoryItemsType">
		    <xs:sequence>
			      <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
				        <xs:complexType>
					          <xs:simpleContent>
						            <xs:extension base="xs:string">
							              <xs:attribute name="id" type="nonEmptyString" use="required"/>
							              <xs:attribute name="correct" type="yesNoType" use="optional"/>
							              <xs:attribute name="audio" type="nonEmptyString" use="optional"/>
							              <xs:attribute name="image" type="nonEmptyString" use="optional"/>
						            </xs:extension>
					          </xs:simpleContent>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="length" use="required">
			      <xs:simpleType>
				        <xs:restriction base="xs:integer">
				           <xs:maxInclusive value="20"/>
				           <xs:minInclusive value="1"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>

	  </xs:complexType>
   <xs:complexType name="categoriseTileMazeDistractorsType">
		    <xs:sequence>
			      <xs:element name="item" minOccurs="1" maxOccurs="unbounded">
				        <xs:complexType>
					          <xs:simpleContent>
						            <xs:extension base="xs:string">
							              <xs:attribute name="id" type="nonEmptyString" use="required"/>
							              <xs:attribute name="audio" type="nonEmptyString" use="optional"/>
							              <xs:attribute name="image" type="nonEmptyString" use="optional"/>
						            </xs:extension>
					          </xs:simpleContent>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="spellingBeeType">
		    <xs:annotation>
			      <xs:documentation>
				Spelling Bee schema definition - can only sit inside the 'main' element in an RCF activity - only one per activity (RCF-9142)
				has
					- alternativeSprite (0-1)
					- wordSets (1)
						- wordSet (1-n)
							- word (1)
								- acceptable (1) / item (1-n)
								- clue (1) (formatted text elements)

			</xs:documentation>
		    </xs:annotation>

		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="alternativeSprite"
                           type="spellingBeeAlternativeSpriteType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="wordSets"
                           type="spellingBeeWordSets"
                           minOccurs="1"
                           maxOccurs="1">
						            <xs:unique name="spellingBeeWordSetIdUnique">
							              <xs:selector xpath="wordSet"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
						            <xs:unique name="spellingBeeWordIdUnique">
							              <xs:selector xpath=".//word"/>
							              <xs:field xpath="@id"/>
						            </xs:unique>
					          </xs:element>
				        </xs:sequence>
				        <xs:attribute name="timeLimit" type="rcfInteger" use="optional">
					          <xs:annotation>
						            <xs:documentation>Number of seconds allowed to complete the spellingbee - if missing then default of 30 seconds is used</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="keyboard" use="optional">
					          <xs:simpleType>
						            <xs:restriction base="xs:string">
							              <xs:enumeration value="en"/>
							              <xs:enumeration value="es"/>
						            </xs:restriction>
					          </xs:simpleType>
				        </xs:attribute>
				        <!-- new attribute for the FIAB game implementation -->
				        <xs:attribute name="play" use="optional" type="rcfInteger"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="spellingBeeAlternativeSpriteType">
		    <xs:annotation>
			      <xs:documentation>
				Alternative sprite (same as tileMaze / balloons alternative sprite)
			</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="sharedAsset" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="spellingBeeWordSets">
		    <xs:annotation>
			      <xs:documentation>
				Allows:
					- wordSet (1..n) elements
			</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="wordSet"
                     type="spellingBeeWordSetType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="spellingBeeWordSetType">
		    <xs:annotation>
			      <xs:documentation>
				Allows @id attribute
				Allows :
					- word (1..n) elements
			</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:element name="word"
                     type="spellingBeeWordType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="spellingBeeWordType">
		    <xs:annotation>
			      <xs:documentation>
				Allows @id attribute (unique across *spellingBee* ancestor element, not wordSet !)
				Allows :
					- acceptable (1) / item (1..n)
					- clue (1)
			</xs:documentation>
		    </xs:annotation>
		    <xs:sequence minOccurs="1" maxOccurs="1">
			      <xs:element name="acceptable">
				        <xs:complexType mixed="false">
					          <xs:sequence>
						            <xs:element name="item" maxOccurs="unbounded">
							              <xs:complexType>
								                <xs:simpleContent>
									                  <xs:extension base="spellingBeeSimpleWordAnswerType">
										                    <xs:attribute name="id" type="nonEmptyString" use="required"/>
									                  </xs:extension>
								                </xs:simpleContent>
							              </xs:complexType>
						            </xs:element>
					          </xs:sequence>
				        </xs:complexType>
				        <xs:unique name="spellingBeeAcceptableWordItemUniqueId">
					          <xs:selector xpath=".//item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
			      <xs:element name="clue"
                     type="spellingBeeClueType"
                     minOccurs="1"
                     maxOccurs="1"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="spellingBeeClueType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				Allows @image and @audio attributes
				Contents allow formatting elements and an sSpan
			</xs:documentation>
		    </xs:annotation>
		    <xs:sequence>
			      <xs:choice minOccurs="0" maxOccurs="unbounded">
				        <xs:group ref="formattingElements"/>
				        <xs:element ref="sSpan" minOccurs="0"/>
				        <xs:element ref="colourText" minOccurs="0"/>
			      </xs:choice>
		    </xs:sequence>
		    <xs:attribute name="audio" type="nonEmptyString" use="optional"/>
		    <xs:attribute name="image" type="nonEmptyString" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="feedbackTeacherGradedTaskType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>
				Teacher Graded Task Interaction Type used with the RCF activityMode / feedback modes

				Has no 'user interface' for the student, but is used to provide a 'task' for the student
				to complete and UI elements for the teacher to provide marks and feedback
			</xs:documentation>
		    </xs:annotation>

		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="markingGuidance"
                           type="teacherGradedTaskMarkingGuidanceType"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="markedByTeacher"
                          type="yesType"
                          use="optional"
                          default="y"/>
			      </xs:extension>
		    </xs:complexContent>

	  </xs:complexType>
   <xs:complexType name="teacherGradedTaskMarkingGuidanceType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGameType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="items"
                           type="fiabBubblesGameItemsType"
                           minOccurs="1"
                           maxOccurs="1"/>
					          <xs:element name="distractors"
                           type="fiabBubblesGameDistractorsType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="questions"
                           type="fiabBubblesGameQuestionsType"
                           minOccurs="1"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="baseSpeed" type="fiabBubblesGameBaseSpeedType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGameItemsType">
		    <xs:sequence>
			      <xs:element name="item"
                     type="fiabBubblesGamesItemType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGameDistractorsType">
		    <xs:sequence>
			      <xs:element name="item"
                     type="fiabBubblesGamesItemType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGamesItemType">
		    <xs:complexContent mixed="true">
			      <xs:extension base="rcfInteraction">
				        <xs:attribute name="image" type="nonEmptyString" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGameQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="fiabBubblesGameQuestionType"
                     minOccurs="1"
                     maxOccurs="unbounded">
				        <xs:unique name="fiabBubblesGameQuestionItemIdUnique">
					          <xs:selector xpath="item"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="play" type="rcfInteger" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGameQuestionType">
		    <xs:sequence>
			      <xs:element name="prompt" type="gamePrompt" minOccurs="1" maxOccurs="1"/>
			      <xs:element name="item"
                     type="fiabBubblesGameQuestionItemType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="fiabBubblesGameQuestionItemType">
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="fiabSnapGameType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="distractors" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence maxOccurs="1">
								                <xs:element name="items" minOccurs="0" maxOccurs="1">
									                  <xs:complexType>
										                    <xs:sequence>
											                      <xs:element name="item"
                                             type="fiabBubblesGamesItemType"
                                             minOccurs="1"
                                             maxOccurs="unbounded"/>
										                    </xs:sequence>
									                  </xs:complexType>
								                </xs:element>
								                <xs:element name="targets" minOccurs="0" maxOccurs="1">
									                  <xs:complexType>
										                    <xs:sequence>
											                      <xs:element name="target"
                                             type="fiabBubblesGamesItemType"
                                             minOccurs="1"
                                             maxOccurs="unbounded"/>
										                    </xs:sequence>
									                  </xs:complexType>
								                </xs:element>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="cards"
                           type="fiabSnapGameCardsType"
                           minOccurs="1"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="baseSpeed" type="fiabBubblesGameBaseSpeedType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fiabSnapGameCardsType">
		    <xs:sequence>
			      <xs:element name="pair" minOccurs="2" maxOccurs="unbounded">
				        <xs:complexType>
					          <xs:sequence>
						            <xs:element name="item" type="fiabBubblesGamesItemType"/>
						            <xs:element name="target" type="fiabBubblesGamesItemType"/>
					          </xs:sequence>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="play" type="rcfInteger" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="fiabQuizGameType">
		    <xs:annotation>
			      <xs:documentation>FIAB Quiz game</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="coverScreen"
                           type="coverScreenType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="settings" minOccurs="0" maxOccurs="1">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="onePlayer"
                                    minOccurs="0"
                                    maxOccurs="1"
                                    type="fiabQuizSettingsType"/>
								                <xs:element name="twoPlayer"
                                    minOccurs="0"
                                    maxOccurs="1"
                                    type="fiabQuizSettingsType"/>
								                <xs:element name="threePlayer"
                                    minOccurs="0"
                                    maxOccurs="1"
                                    type="fiabQuizSettingsType"/>
								                <xs:element name="fourPlayer"
                                    minOccurs="0"
                                    maxOccurs="1"
                                    type="fiabQuizSettingsType"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="questions">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="question"
                                    minOccurs="1"
                                    maxOccurs="unbounded"
                                    type="fiabQuizQuestionType"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="fiabQuizSettingsType">
		    <xs:attribute name="questionsPerRound" use="required" type="xs:positiveInteger"/>
	  </xs:complexType>
   <xs:complexType name="fiabQuizQuestionType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="prompt" type="fiabQuizPromptType"/>
					          <xs:element name="answer"/>
					          <xs:element name="distractors">
						            <xs:complexType>
							              <xs:sequence>
								                <xs:element name="item" minOccurs="1" maxOccurs="3"/>
							              </xs:sequence>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="cogsQuestionsType">
		    <xs:sequence>
			      <xs:element name="question"
                     type="cogsQuestionType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
		    <xs:attribute name="play" type="rcfInteger" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="cogsQuestionType">
		    <xs:sequence>
			      <xs:element name="prompt" type="gamePrompt" minOccurs="0" maxOccurs="1"/>
			      <xs:element name="sentence"
                     type="cogsSentenceType"
                     minOccurs="1"
                     maxOccurs="1">
				        <xs:unique name="cogTextUniqueId">
					          <xs:selector xpath="cogText"/>
					          <xs:field xpath="@id"/>
				        </xs:unique>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
	  </xs:complexType>
   <xs:complexType name="cogsSentenceType">
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:choice>
				        <xs:element name="fixedText" minOccurs="1" maxOccurs="unbounded"/>

				        <xs:element name="cogText"
                        type="itemCorrectListType"
                        minOccurs="1"
                        maxOccurs="unbounded">
					          <xs:unique name="cogTextItemIdUnique">
						            <xs:selector xpath="item"/>
						            <xs:field xpath="@id"/>
					          </xs:unique>
				        </xs:element>

				        <!-- to restrict cogText/item text length to 14 chars is a bit ... verbose ...
				<xs:element name="cogText" minOccurs="1" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence minOccurs="1" maxOccurs="unbounded">
							<xs:element name="item">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="cogRestrictedStringLength">
											<xs:attribute name="id" type="nonEmptyString" use="required"/>
											<xs:attribute name="correct" type="yesNoType" use="optional"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="id" type="nonEmptyString" use="required"/>
					</xs:complexType>
					<xs:unique name="cogTextItemIdUnique">
						<xs:selector xpath="item"/>
						<xs:field xpath="@id"/>
					</xs:unique>
				</xs:element>
				-->
			      </xs:choice>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="diceSetType">
		    <xs:sequence>
			      <xs:element name="die" type="dieType" minOccurs="3" maxOccurs="5"/>
		    </xs:sequence>
		    <xs:attribute name="label" type="xs:string" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="dieType">
		    <xs:sequence>
			      <xs:choice minOccurs="6" maxOccurs="6">
				        <xs:element name="faceBuiltIn" type="dieFaceTypeBuiltIn"/>
				        <xs:element name="faceCustom" type="dieFaceTypeCustom"/>
			      </xs:choice>
		    </xs:sequence>
		    <xs:attribute name="label" type="xs:string" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="dieFaceTypeCustom" mixed="false">
		    <xs:attribute name="src" type="xs:string" use="required"/>
		    <xs:attribute name="label" type="xs:string" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="dieFaceTypeBuiltIn" mixed="false">
		    <xs:attribute name="option" type="buildInFaceOptionType" use="required"/>
		    <xs:attribute name="label" type="xs:string" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="staticWordPoolType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>
				A simple list structure for WP's to produce a static word pool list
			</xs:documentation>
		    </xs:annotation>
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="item" minOccurs="1">
				        <xs:complexType mixed="true">
					          <xs:sequence minOccurs="0" maxOccurs="unbounded">
						            <xs:element ref="cSpan" minOccurs="0"/>
						            <xs:element ref="colourText" minOccurs="0"/>
						            <xs:element name="b" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="i" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="u" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="strike" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="sup" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="sub" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="phons" type="phonsType" minOccurs="0"/>
					          </xs:sequence>
					          <xs:attribute name="example" type="yesNoType" use="optional" default="n"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="mathsAdditionType">
		<!--
			<mathsAddition id="maths-add-1" decimalNotation="comma/point">
				<number>1</number>
				<number>10.234</number>
				<number>8.9</number>
			</mathsAddition>
		-->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="number"
                           type="xs:decimal"
                           minOccurs="2"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="decimalNotation" type="decimalNotationType" default="point"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mathsSubtractionType">
		<!--
			<mathSubtraction id="maths-add-1" decimalNotation="comma/point">
				<number>1</number>
				<number>10.234</number>
				<number>8.9</number>
			</mathSubtraction>
		-->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="number"
                           type="xs:decimal"
                           minOccurs="2"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="decimalNotation" type="decimalNotationType" default="point"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mathsMultiplicationType">
		<!--
			<mathsMultiplication id="maths-add-1" showWorking="y/n" decimalNotation="comma/point">
				<number>10</number>
				<number>5</number>
			</mathsMultiplication>
		-->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="number" type="xs:decimal" minOccurs="2" maxOccurs="2"/>
				        </xs:sequence>
				        <xs:attribute name="decimalNotation" type="decimalNotationType" default="point"/>
				        <xs:attribute name="showWorking" type="yesNoType" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="mathsDivisionType">
		<!--
			for 10/5 would be :

			<mathsDivision id="maths-add-1" showWorking="y/n" decimalNotation="comma/point">
				<number>10</number>
				<number>5</number>
			</mathsDivision>
		-->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:element name="number" type="xs:decimal" minOccurs="2" maxOccurs="2"/>
				        </xs:sequence>
				        <xs:attribute name="layout"
                          type="divisionLayoutType"
                          use="optional"
                          default="english"/>
				        <xs:attribute name="decimalNotation" type="decimalNotationType" default="point"/>
				        <xs:attribute name="decimals"
                          type="decimalPlacesType"
                          use="optional"
                          default="0"/>
				        <xs:attribute name="rounding" type="yesNoType" use="optional" default="n"/>
				        <xs:attribute name="markRemainder" type="yesNoType" default="n"/>
				        <xs:attribute name="showWorking" type="yesNoType" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="feedbackFreeDrawingType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Free Drawing interaction (open-gradable) used with the RCF activityMode / feedback / open-gradable modes</xs:documentation>
		    </xs:annotation>

		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="backgroundImage" minOccurs="0" maxOccurs="1">
						            <xs:complexType mixed="false">
							              <xs:attribute name="src" type="noSpaceType" use="required"/>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="answerModel"
                           type="freeDrawingAnswerModelType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element name="markingGuidance"
                           type="freeDrawingMarkingGuidanceType"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="textInputExpanded" type="yesNoType" use="optional"/>
				        <xs:attribute name="max_score" type="rcfInteger" use="optional"/>
				        <xs:attribute name="a11yTitle" type="xs:string" use="optional"/>
				        <xs:attribute name="includePrintedTextArea" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="freeDrawingMarkingGuidanceType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="freeDrawingAnswerModelType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				A New optional element to the freeDrawing interaction, which allows an image and some text to be added.
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="image" type="nonEmptyString" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="mediaElementType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>media element appearing under activity element to signify media only activity type</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="1">
			      <xs:element ref="audio"/>
			      <xs:element ref="video"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="basicFormattingType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="basicFormattingTypeWithImages" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element ref="image" minOccurs="0"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="mixedMediaFormattingType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="multimediaFormattingElementsAudio"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="localeBasicFormattingType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="basicFormattingType">
				        <xs:attribute name="lang" type="xs:string" use="optional" default="EN"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="basicParagraphType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>A basicParagraph is the same as a fullParagraph, but with no interactives</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:element ref="image"/>
			      <xs:element ref="sSpan"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="imageAudio" type="imageAudioType"/>
			      <xs:element ref="audio"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="phonsType" mixed="true">
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="rubricType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element ref="audio" minOccurs="0"/>
			      <xs:element name="p"
                     type="basicParagraphType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:element name="list"
                     type="basicListType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
		    </xs:choice>
		    <xs:attribute name="lang" type="xs:string" use="optional" default="EN"/>
	  </xs:complexType>
   <xs:complexType name="simpleBlockElementsType" mixed="true">
		    <xs:annotation>
			      <xs:documentation/>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="blockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:choice minOccurs="0">
						            <xs:annotation>
							              <xs:documentation>Interactive Text is *outside* the 'mixed block content' because we do not allow nesting of blocks inside interactive text. Complex Droppables are also outside the 'mixed block content' for the same reason - and also because we don't allow the 'simple droppables' inside of it.</xs:documentation>
						            </xs:annotation>
						            <xs:element ref="complexDroppableBlock" minOccurs="0"/>
						            <xs:choice minOccurs="0" maxOccurs="unbounded">
							              <xs:element ref="prompt"/>
							              <xs:element name="collapsibleBlock" type="collapsibleType" minOccurs="0"/>
							              <xs:element ref="timedMarkupBlock" minOccurs="0" maxOccurs="unbounded"/>
							              <xs:element name="slidingBlock"
                                 type="slidingBlockType"
                                 minOccurs="0"
                                 maxOccurs="unbounded"/>
							              <xs:element name="block"
                                 type="blockType"
                                 minOccurs="0"
                                 maxOccurs="unbounded"/>
							              <xs:element name="highlightingTextBlock"
                                 type="highlightingTextBlockType"
                                 minOccurs="0"
                                 maxOccurs="unbounded"/>
							              <xs:element name="feedback"
                                 type="feedbackType"
                                 minOccurs="0"
                                 maxOccurs="unbounded"/>
							              <xs:element ref="imageSet" minOccurs="0" maxOccurs="unbounded"/>
							              <xs:element ref="dl" minOccurs="0" maxOccurs="unbounded"/>

							              <xs:element ref="interactiveImageSet" minOccurs="0" maxOccurs="unbounded"/>
							              <!-- maths components -->
							              <xs:element ref="mathsAddition" minOccurs="0" maxOccurs="unbounded"/>
							              <xs:element ref="mathsSubtraction" minOccurs="0" maxOccurs="unbounded"/>
							              <xs:element ref="mathsMultiplication" minOccurs="0" maxOccurs="unbounded"/>
							              <xs:element ref="mathsDivision" minOccurs="0" maxOccurs="unbounded"/>

							              <!-- -->
							              <xs:element ref="chase"/>
							              <xs:group ref="complexBlockElements" minOccurs="0"/>

							              <xs:group ref="markedBlockElements" minOccurs="0"/>

							              <xs:element ref="hangman"/>
							              <xs:element ref="pelmanism"/>
							              <xs:element ref="simpleCarousel"/>

							              <xs:element ref="mlTypein"/>

							              <xs:group ref="markedInlineElements" minOccurs="0"/>
							              <xs:group ref="basicInlineElements" minOccurs="0"/>
							              <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
							              <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>

							              <xs:element name="staticAudioTranscript"
                                 minOccurs="0"
                                 maxOccurs="unbounded"
                                 type="staticAudioTranscriptType"/>
							              <xs:element ref="staticWordPool"/>
							              <!-- -->
						            </xs:choice>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="column" type="yesNoType" use="optional"/>
				        <xs:attribute name="numberedInteractives"/>
				        <xs:attribute name="blockSet" type="yesNoType" use="optional"/>
				        <xs:attribute name="equaliseHeight" type="yesNoType" use="optional"/>
				        <xs:attribute name="lang" type="languageType" use="optional"/>
				        <xs:attributeGroup ref="rcfTriggerableAttributes"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="presentationBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="blockType">
				        <xs:attribute name="referenceId" type="xs:string" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="informationBlockType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>An infoBlock can live outside of a block, or within a block, it contains standard / basic formatting elements, but NO interactives</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="collapsibleBlock"
                     type="collapsibleInfoBlockType"
                     minOccurs="0"/>
			      <xs:element ref="timedMarkupBlock" minOccurs="0" maxOccurs="unbounded"/>
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
		    </xs:choice>

		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <!-- -->
	  </xs:complexType>
   <xs:complexType name="highlightingTextBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="simpleBlockElements" minOccurs="0"/>
					          <xs:group ref="multimediaFormattingElements" minOccurs="0"/>
					          <xs:element name="staticAudioTranscript"
                           minOccurs="0"
                           type="staticAudioTranscriptType"/>
					          <xs:element name="block" type="simpleFormattingBlockType" minOccurs="0"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="localeInformationBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="informationBlockType">
				        <xs:attribute name="lang" type="xs:string" use="optional" default="EN"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="collapsibleType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence minOccurs="1">
					          <xs:element name="collapseButton" type="collapseButtonType" minOccurs="1"/>
					          <xs:element name="block" type="blockType" minOccurs="1" maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="open" type="yesNoType" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="collapsibleBlockTypeInInteractiveTextBlock">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence minOccurs="1">
					          <xs:element name="collapseButton" type="collapseButtonType" minOccurs="1"/>
					          <xs:element name="block"
                           type="interactiveTextContentBlockType"
                           minOccurs="1"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="open" type="yesNoType" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="collapsibleInfoBlockType">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence minOccurs="1">
					          <xs:element name="collapseButton" type="collapseButtonType" minOccurs="1"/>
					          <xs:element name="block"
                           type="informationBlockType"
                           minOccurs="1"
                           maxOccurs="1"/>
				        </xs:sequence>
				        <xs:attribute name="open" type="yesNoType" default="n"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="slidingBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence minOccurs="1">
					          <xs:element name="slidingButton" minOccurs="1">
						            <xs:complexType mixed="false">
							              <xs:attribute name="caption" type="xs:string" use="required"/>
						            </xs:complexType>
					          </xs:element>
					          <xs:element name="slidingPanelTitle"
                           type="xs:string"
                           minOccurs="1"
                           maxOccurs="1"/>
					          <xs:element name="block"
                           type="slidingBlockContentType"
                           minOccurs="1"
                           maxOccurs="unbounded"/>
				        </xs:sequence>
				        <xs:attribute name="slideFrom" type="slideFromType" use="required"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="slidingBlockContentType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Blocks within a slidingBlock can only contain simple types / media types -NO interactions are allowed</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="block" type="slidingBlockContentType" minOccurs="0"/>
			      <xs:element name="feedback"
                     type="feedbackType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element name="collapsibleBlock" type="collapsibleType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
		    <!-- -->
	  </xs:complexType>
   <xs:complexType name="complexBlockElementsType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>(complexBlockElementsType) allows full formatting and Interactives</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="markedInlineElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element ref="cSpan" minOccurs="0"/>
			      <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
			      <xs:element ref="mlTypein" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="simpleFormattingBlockType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="block" type="simpleFormattingBlockType" minOccurs="0"/>
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:group ref="multimediaFormattingElements" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern"/>
		    <xs:attribute name="lang" type="languageType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="collapseButtonType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>The button used in collapsible blocks</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="captionWhenClosed" type="xs:string" use="required"/>
		    <xs:attribute name="captionWhenOpened" type="xs:string" use="required"/>
	  </xs:complexType>
   <xs:complexType name="hintsContainerBlockType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>A hints block contains one or more hintBlock elements which contain non interactive markup and a language attribute
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="hintBlock"
                     type="hintBlockType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="hintBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="simpleBlockElements" minOccurs="0"/>
					          <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
					          <xs:group ref="basicInlineElements" minOccurs="0"/>
				        </xs:choice>
				        <xs:attribute name="lang" type="xs:string" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="splitBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:sequence>
					          <xs:element name="block" type="blockType" minOccurs="2" maxOccurs="2"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="dtType" mixed="true">
        <xs:complexContent>
            <xs:extension base="rcfFormattingObject">
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:group ref="formattingElements"/>
                    <xs:element ref="colourText" minOccurs="0"/>
                </xs:choice>
                <xs:attributeGroup ref="rcfTriggerableAttributes"/>
                <xs:attribute name="lang" type="languageType" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
   <xs:complexType name="ddType" mixed="true">
        <xs:complexContent>
            <xs:extension base="rcfFormattingObject">
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:group ref="formattingElements"/>
                    <xs:element ref="colourText" minOccurs="0"/>
                </xs:choice>
                <xs:attributeGroup ref="rcfTriggerableAttributes"/>
                <xs:attribute name="lang" type="languageType" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
   <xs:complexType name="hyperLinkType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:attribute name="href"/>
				        <xs:attribute name="levelAssetLink"
                          type="yesNoType"
                          default="n"
                          use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="multiPanelType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:element name="slidingBlock"
                           type="slidingBlockType"
                           minOccurs="0"
                           maxOccurs="1"/>
					          <xs:element ref="hints" minOccurs="0" maxOccurs="1"/>
					          <xs:element name="collapsibleBlock"
                           type="collapsibleType"
                           minOccurs="0"
                           maxOccurs="1"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="simpleTableType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="tr" type="simpleRowType"/>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="simpleRowType" mixed="false">
		    <xs:choice>
			      <xs:element name="td" maxOccurs="unbounded" type="simpleTableContentCellType"/>
			      <xs:choice maxOccurs="unbounded">
				        <xs:element name="th" type="simpleTableCellHeaderType"/>
			      </xs:choice>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="complexTableType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="tr" type="complexRowType"/>
		    </xs:sequence>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="complexRowType" mixed="false">
		    <xs:choice>
			      <xs:element name="td" type="complexTableContentCellType" maxOccurs="unbounded"/>
			      <xs:choice maxOccurs="unbounded">
				        <xs:element name="th" type="complexTableCellHeaderType"/>
			      </xs:choice>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="complexTableCellHeaderType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="list" type="complexListType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:group ref="markedInlineElements" minOccurs="0"/>
			      <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
			      <xs:element name="p" type="complexBlockElementsType" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="cSpan" type="complexSpanType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attributeGroup ref="tableColumnAttributes"/>
	  </xs:complexType>
   <xs:complexType name="complexTableContentCellType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="complexTableCellHeaderType">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
					          <xs:element ref="mlTypein"/>
					          <xs:element ref="positioning"/>
					          <xs:element ref="ordering"/>
					          <xs:element ref="complexOrdering"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="simpleTableCellHeaderType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element name="p" type="simpleBlockElementsType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attributeGroup ref="tableColumnAttributes"/>
	  </xs:complexType>
   <xs:complexType name="simpleTableContentCellType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="simpleTableCellHeaderType">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>
					          <xs:element ref="sSpan" minOccurs="0"/>
					          <xs:element ref="colourText" minOccurs="0"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="timedMarkupBlockType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="showRevealButton"
                    type="yesNoType"
                    use="optional"
                    default="n"/>
		    <xs:attribute name="duration" type="xs:integer" use="required"/>
		    <xs:attribute name="initialClass" type="userClassPattern" use="optional"/>
		    <xs:attribute name="activeClass" type="userClassPattern" use="optional"/>
		    <xs:attribute name="finalClass" type="userClassPattern" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="overallScoreType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Tells the xslt where to output the 'overall score' div element(s) in the output html</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="showPercentage" type="yesNoType" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="activityPrompt" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="staticAudioTranscript"
                     minOccurs="0"
                     maxOccurs="unbounded"
                     type="staticAudioTranscriptType"/>
			      <xs:element name="p" type="simpleBlockElementsType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="table" type="simpleTableType"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="gamePrompt" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="staticAudioTranscript"
                     minOccurs="0"
                     maxOccurs="unbounded"
                     type="staticAudioTranscriptType"/>
			      <xs:element name="p" type="simpleBlockElementsType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="feedbackType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Language Hub feedback elements which can contain formatting elements</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="list" type="feedbackListType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="p" type="simpleFeedbackBlockElementsType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="feedbackListType">
		    <xs:annotation>
			      <xs:documentation>A feedbackListType is just like a normal list, but with none of the interactive elements and only available in a feedback element</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element name="list" type="feedbackListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="basicInlineElements" minOccurs="0"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element name="p" type="simpleFeedbackBlockElementsType" minOccurs="0"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="simpleFeedbackBlockElementsType" mixed="true">
		    <xs:annotation>
			      <xs:documentation/>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="staticAudioTranscriptType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>
				New element (formatting elements as children) for the audio transcript as part of assessment / print html
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="simpleBlockElements" minOccurs="0"/>
			      <xs:element name="block"
                     minOccurs="0"
                     maxOccurs="unbounded"
                     type="staticAudioTranscriptType"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemBasedRubric" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="p"
                     type="basicParagraphType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:element name="list"
                     type="basicListType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
		    </xs:choice>
	  </xs:complexType>
   <xs:complexType name="itemBasedPrompt" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="p" type="itemBasedSimpleBlockElementsType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="itemBasedInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="table" type="simpleTableType"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemBasedSimpleBlockElementsType" mixed="true">
		    <xs:annotation>
			      <xs:documentation/>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="itemBasedInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemBasedInteraction" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:element name="p" type="itemInteractionParagraphType" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="itemBasedInlineElements" minOccurs="0"/>
			      <xs:group ref="itemInteractions" minOccurs="0"/>
			      <xs:element name="list" type="itemInteractionListType" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemInteractionSimpleBlockElementsType" mixed="true">
		    <xs:annotation>
			      <xs:documentation/>
		    </xs:annotation>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="itemBasedInlineElements" minOccurs="0"/>
			      <xs:group ref="itemInteractions" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemInteractionBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="itemInteractionSimpleBlockElementsType">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:element name="p" type="itemInteractionParagraphType" minOccurs="0"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemInteractionParagraphType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="itemInlineInteractions" minOccurs="0"/>
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="itemBasedInlineElements" minOccurs="0"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemInteractionListType">
        <xs:annotation>
            <xs:documentation>List type used in item interaction definitions</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="listObject">
                <xs:sequence maxOccurs="unbounded">
                    <xs:element name="li" maxOccurs="unbounded">
                        <xs:complexType mixed="true">
                            <xs:choice minOccurs="0" maxOccurs="unbounded">
                                <xs:group ref="formattingElements" minOccurs="0"/>
                                <xs:group ref="itemBasedInlineElements" minOccurs="0"/>
                                <xs:group ref="itemInteractions" minOccurs="0"/>
                                <xs:element ref="sSpan" minOccurs="0"/>
                                <xs:element ref="colourText" minOccurs="0"/>
                                <xs:element name="p" type="itemInteractionParagraphType" minOccurs="0"/>
                                <xs:element name="block" type="itemInteractionBlockType" minOccurs="0"/>
                            </xs:choice>
                            <xs:attribute name="numbered" type="yesNoType" use="optional"/>
                            <xs:attribute name="class" type="userClassPattern" use="optional"/>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
   <xs:complexType name="itemComplexDroppableBlockType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="itemComplexDroppables" type="itemComplexDroppableListType"/>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:element name="h1" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="h2" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="h3" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="h4" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="h5" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="h6" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="p" type="itemComplexDroppableBlockElementsType"/>
						            <xs:element name="list" type="itemComplexDroppableTextListType"/>
						            <!-- -->
						            <xs:group ref="basicInlineElements" minOccurs="0"/>
						            <xs:element ref="itemComplexDroppable" minOccurs="1"/>
						            <!-- complex droppable 'cSpan' allows different items to normal cSpan -->
						            <xs:element name="cSpan" type="itemComplexSpanType" minOccurs="0"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="restrict" type="yesNoType" use="optional"/>
			      </xs:extension>
			      <!-- RCF-394 -->
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemComplexDroppableBlockElementsType" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements" minOccurs="0"/>
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="itemComplexDroppable" minOccurs="1"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element name="cSpan" type="itemComplexSpanType" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
	  </xs:complexType>
   <xs:complexType name="itemComplexDroppableTextListType">
		    <xs:annotation>
			      <xs:documentation>A basicList is just like a normal list, but with none of the interactive elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="listObject">
				        <xs:sequence maxOccurs="unbounded">
					          <xs:element name="li" maxOccurs="unbounded">
						            <xs:complexType mixed="true">
							              <xs:choice minOccurs="0" maxOccurs="unbounded">
								                <xs:element name="list" type="itemComplexDroppableTextListType" minOccurs="0"/>
								                <xs:group ref="formattingElements" minOccurs="0"/>
								                <xs:group ref="basicInlineElements" minOccurs="0"/>
								                <xs:element ref="itemComplexDroppable" minOccurs="1"/>
								                <xs:element ref="sSpan" minOccurs="0"/>
								                <xs:element ref="colourText" minOccurs="0"/>
								                <xs:element name="cSpan" type="itemComplexSpanType" minOccurs="0"/>
								                <xs:element name="p"
                                    type="itemComplexDroppableBlockElementsType"
                                    minOccurs="0"
                                    maxOccurs="unbounded"/>
							              </xs:choice>
							              <xs:attribute name="class" type="userClassPattern" use="optional"/>
							              <xs:attribute name="numbered" type="yesNoType" use="optional"/>
						            </xs:complexType>
					          </xs:element>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemComplexDroppableListType" mixed="false">
		    <xs:sequence maxOccurs="unbounded">
			      <xs:element name="item">
				        <xs:complexType mixed="true">
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="multimediaFormattingElementsAudio"/>
					          </xs:choice>
					          <xs:attribute name="id" type="nonEmptyString" use="required"/>
					          <xs:attribute name="rank" type="xs:integer" use="optional"/>
					          <xs:attribute name="audio" type="xs:string" use="optional"/>
					          <xs:attribute name="restrictMaxShown" type="xs:positiveInteger" use="optional"/>
				        </xs:complexType>
			      </xs:element>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="itemComplexSpanType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>itemComplexDroppable 'complex styled span' - contains formatting elements and itemComplexDroppable elements</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfFormattingObject">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="formattingElements" minOccurs="0"/>
					          <xs:element ref="itemComplexDroppable" minOccurs="0"/>
					          <xs:group ref="basicInlineElements" minOccurs="0"/>
				        </xs:choice>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemRadioListType" mixed="false">
		    <xs:annotation>
			      <xs:documentation>Item Based Radio List Type for PBF item based activities / interactions</xs:documentation>
		    </xs:annotation>

		    <xs:complexContent>
			      <xs:extension base="feedbackMediaItemCorrectListType">
				        <xs:attribute name="id" type="xs:string" use="required"/>
				        <xs:attribute name="name" use="optional"/>
				        <xs:attribute name="displayType" type="radioListDisplayStyle" use="optional"/>
				        <xs:attribute name="start" type="xs:integer" use="optional"/>
				        <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        <xs:attribute name="example" type="yesNoType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemBasedSelectableTextType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					          <xs:choice minOccurs="0" maxOccurs="unbounded">
						            <xs:group ref="interactiveTextBlockLevelElements"/>
						            <xs:element name="eDiv" type="eDivType" minOccurs="0" maxOccurs="unbounded"/>
					          </xs:choice>
				        </xs:sequence>
				        <xs:attribute name="restrict" type="yesNoType" use="optional" default="n">
					          <xs:annotation>
						            <xs:documentation>Restrict the number of 'checkable' items to the number of correct items in the list</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
				        <xs:attribute name="mark" type="markingType" default="item" use="optional">
					          <xs:annotation>
						            <xs:documentation>Mark the items as one point (item), or individually (list) - default</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemTypeinGroupType" mixed="true">
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:choice minOccurs="0" maxOccurs="unbounded">
					          <xs:group ref="formattingElements"/>
					          <!-- typein group span -->
					          <xs:element name="tSpan">
						            <xs:annotation>
							              <xs:documentation>'span' element for inside itemTypeinGroup elements - only allows simple formatting and further typein elements</xs:documentation>
						            </xs:annotation>
						            <xs:complexType mixed="true">
							              <xs:complexContent>
								                <xs:extension base="rcfFormattingObject">
									                  <xs:choice minOccurs="0" maxOccurs="unbounded">
										                    <xs:group ref="formattingElements"/>
										                    <xs:element ref="itemTypein"/>
									                  </xs:choice>
									                  <xs:attribute name="lang" type="languageType" use="optional"/>
								                </xs:extension>
							              </xs:complexContent>
						            </xs:complexType>
					          </xs:element>
					          <xs:element ref="itemTypein"/>
				        </xs:choice>
				        <xs:attribute name="caseSensitive" type="yesNoType">
					          <xs:annotation>
						            <xs:documentation>Specifies whether the generated HTML should be case sensitive when checking the answers entered by the user</xs:documentation>
					          </xs:annotation>
				        </xs:attribute>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemSentenceBuilderType">
		<!-- extends rcfInteraction so can have id and class -->
		    <xs:complexContent>
			      <xs:extension base="rcfMarkedInteractionWithExample">
				        <xs:sequence>
					<!-- has items element -->
					          <xs:element name="items" type="itemSentenceBuilderItems"/>
					          <!-- has distractors element (optional) -->
					          <xs:element name="distractors" type="itemSentenceBuilderItems" minOccurs="0"/>
					          <!-- has alternativeAnswers element (optional) -->
					          <xs:element name="alternativeAnswers"
                           type="itemSentenceBuilderAlternativeAnswers"
                           minOccurs="0"/>
				        </xs:sequence>
				        <xs:attribute name="capitalise" type="capitaliseType" use="optional"/>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:complexType name="itemSentenceBuilderItems">
		    <xs:sequence>
			      <xs:element name="prefix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
			      <xs:element name="item"
                     type="itemSentenceBuilderItem"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
			      <xs:element name="suffix" minOccurs="0" maxOccurs="1" type="nonEmptyString"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="itemSentenceBuilderItem" mixed="true">
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			      <xs:group ref="formattingElements"/>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
		    </xs:choice>
		    <xs:attribute name="id" type="nonEmptyString" use="required"/>
		    <xs:attribute name="rank" type="xs:integer" use="optional"/>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="fixed" type="yesNoType" use="optional" default="n"/>
	  </xs:complexType>
   <xs:complexType name="itemSentenceBuilderAlternativeAnswers">
		    <xs:sequence>
			      <xs:element name="item"
                     type="nonEmptyString"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="itembasedItemListType" mixed="false">
		    <xs:sequence minOccurs="1" maxOccurs="unbounded">
			      <xs:element name="item" type="itembasedItemListItemType"/>
		    </xs:sequence>
	  </xs:complexType>
   <xs:complexType name="itembasedItemListItemType" mixed="true">
		    <xs:annotation>
			      <xs:documentation>Definition for an 'item' in the itemList xml document - based on core 'rcfInteraction' type containing an 'id' and a 'class' attribute</xs:documentation>
		    </xs:annotation>
		    <xs:complexContent>
			      <xs:extension base="rcfInteraction">
				        <xs:sequence>
					          <xs:element name="itemRubric" type="itemBasedRubric" minOccurs="0"/>
					          <xs:element minOccurs="0" name="prompt" type="itemBasedPrompt"/>
					          <xs:element name="interactive" type="itemBasedInteraction"/>
				        </xs:sequence>
			      </xs:extension>
		    </xs:complexContent>
	  </xs:complexType>
   <xs:attributeGroup name="rcfTriggerableAttributes">
		    <xs:annotation>
			      <xs:documentation>A triggerable object will detect clicks, and add it's class value to the 'activity div' on the final page</xs:documentation>
		    </xs:annotation>
		    <xs:attribute name="triggerClass" type="triggerClassPattern" use="optional"/>
		    <xs:attribute name="triggerLoop" type="yesNoType" use="optional"/>
		    <xs:attribute name="triggerNumber" type="xs:integer" use="optional"/>
		    <xs:attribute name="triggerExclusive" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>'Exclusive triggers' will remove any other trigger classes added to the activity div</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:attributeGroup>
   <xs:attributeGroup name="tableColumnAttributes">
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="colspan" type="xs:integer" use="optional"/>
		    <xs:attribute name="rowspan" type="xs:integer" use="optional"/>
	  </xs:attributeGroup>
   <xs:group name="basicInlineElements">
		    <xs:choice>
			      <xs:element ref="audio"/>
			      <xs:element ref="image"/>
			      <xs:element ref="imageAudio"/>
			      <xs:element ref="a"/>
			      <xs:element ref="textInput"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="complexInlineElements">
		    <xs:choice>
			      <xs:element ref="eSpan" minOccurs="0" maxOccurs="unbounded"/>
			      <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="markedBlockElements">
		    <xs:choice>
			      <xs:element ref="interactiveTextBlock" minOccurs="0"/>
			      <xs:element ref="categorise" minOccurs="0"/>
			      <xs:element ref="complexCategorise" minOccurs="0"/>
			      <xs:element ref="positioning" minOccurs="0"/>
			      <xs:element ref="ordering" minOccurs="0"/>
			      <xs:element ref="complexOrdering" minOccurs="0"/>
			      <xs:element ref="crossword" minOccurs="0"/>
			      <xs:element ref="fixedCrossword" minOccurs="0"/>
			      <xs:element ref="verticalCrossword" minOccurs="0"/>
			      <xs:element ref="matching" minOccurs="0"/>
			      <xs:element ref="complexMatching" minOccurs="0"/>
			      <xs:element ref="wordSnake" minOccurs="0"/>
			      <xs:element ref="wordSearch" minOccurs="0"/>
			      <xs:element ref="fixedWordSearch" minOccurs="0"/>
			      <xs:element ref="sentenceBuilder" minOccurs="0"/>
			      <xs:element ref="wordInsert" minOccurs="0"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="markedInlineElements">
		    <xs:choice>
			<!--
				use references to the declared elements to stop repeating the contraints for child ids in interactions
			-->
			      <xs:element ref="dropDown"/>
			      <xs:element ref="radio"/>
			      <xs:element ref="checkbox"/>

			      <!-- <xs:element name="droppable" type="droppableType"/> -->
			      <xs:element ref="droppable"/>
			      <!-- <xs:element name="locating" type="locatingType"/> -->
			      <xs:element ref="locating"/>

			      <xs:element name="typein" type="resizableMarkableTypeInTextType"/>

			      <xs:element ref="typeinGroup"/>

			      <xs:element ref="inlineOrdering"/>

		    </xs:choice>
	  </xs:group>
   <xs:group name="unmarkedInteractiveBlockElements">
		    <xs:annotation>
			      <xs:documentation/>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element ref="mlTextInput"/>
			      <xs:element ref="writing"/>
			      <xs:element name="recording" type="feedbackRecordingType"/>
			      <xs:element ref="freeDrawing"/>
			      <xs:element ref="teacherGradedTask"/>
			      <xs:element ref="canDo"/>
			      <xs:element ref="video"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="simpleBlockElements">
		    <xs:annotation>
			      <xs:documentation>
			simpleBlockElements have *NO* marked children
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="h1" type="simpleBlockElementsType"/>
			      <xs:element name="h2" type="simpleBlockElementsType"/>
			      <xs:element name="h3" type="simpleBlockElementsType"/>
			      <xs:element name="h4" type="simpleBlockElementsType"/>
			      <xs:element name="h5" type="simpleBlockElementsType"/>
			      <xs:element name="h6" type="simpleBlockElementsType"/>
			      <xs:element name="p" type="simpleBlockElementsType"/>
			      <xs:element name="list" type="basicListType"/>
			      <xs:element name="table" type="simpleTableType"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="formattingElements">
		    <xs:annotation>
			      <xs:documentation>The basic formatting tags: b, i, u, sup are allowed to contain other tags, but only of the basicFormatting type</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="b" type="basicFormattingType"/>
			      <xs:element name="i" type="basicFormattingType"/>
			      <xs:element name="u" type="basicFormattingType"/>
			      <xs:element name="strike" type="basicFormattingType"/>
			      <xs:element name="sup" type="basicFormattingType"/>
			      <xs:element name="sub" type="basicFormattingType"/>
			      <xs:element name="br">
				        <xs:complexType/>
			      </xs:element>
			      <xs:element name="phons" type="phonsType"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="multimediaFormattingElements">
		    <xs:annotation>
			      <xs:documentation>The basic formatting tags: b, i, u, sup are allowed to contain other tags, but only of the basicFormatting type</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="b" type="basicFormattingType"/>
			      <xs:element name="i" type="basicFormattingType"/>
			      <xs:element name="u" type="basicFormattingType"/>
			      <xs:element name="strike" type="basicFormattingType"/>
			      <xs:element name="sup" type="basicFormattingType"/>
			      <xs:element name="sub" type="basicFormattingType"/>
			      <xs:element name="br">
				        <xs:complexType/>
			      </xs:element>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element ref="audio" minOccurs="0"/>
			      <xs:element ref="image" minOccurs="0"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="multimediaFormattingElementsAudio">
		    <xs:annotation>
			      <xs:documentation>The basic formatting tags: b, i, u, sup are allowed to contain other tags, but only of the basicFormatting type</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="b" type="basicFormattingType"/>
			      <xs:element name="i" type="basicFormattingType"/>
			      <xs:element name="u" type="basicFormattingType"/>
			      <xs:element name="strike" type="basicFormattingType"/>
			      <xs:element name="sup" type="basicFormattingType"/>
			      <xs:element name="sub" type="basicFormattingType"/>
			      <xs:element name="br">
				        <xs:complexType/>
			      </xs:element>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element ref="audio" minOccurs="0"/>
			      <xs:element ref="image" minOccurs="0"/>
            <xs:element ref="imageAudio" minOccurs="0"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="topLevelInteractiveBlockElements">
		    <xs:annotation>
			      <xs:documentation>Top-level (below 'main') unmarked interactive elements, such as
				flashcard, carousel, movingTargets, compositeScene, colouring and answerKey. There
				can only be one instance of these elements in an activity at this level in the
				document</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element ref="flashcard"/>
			      <xs:element ref="blendedFlashcards"/>
			      <xs:element ref="carousel"/>
			      <xs:element ref="movingTargets"/>
			      <xs:element ref="compositeScene"/>
			      <xs:element ref="colouring"/>
			      <xs:element ref="listenAndColour"/>
			      <xs:element ref="balloonsGame"/>
			      <xs:element ref="findInImage"/>
			      <xs:element ref="story"/>
			      <xs:element ref="sequenceTileMaze"/>
			      <xs:element ref="categoriseTileMaze"/>
			      <xs:element ref="spellingBee"/>
			      <xs:element ref="bubblesGame"/>
			      <xs:element ref="barrelsGame"/>
			      <xs:element ref="snapGame"/>
			      <xs:element ref="whackaMoleGame"/>
			      <xs:element ref="quizGame"/>
			      <xs:element ref="laneChangerGame"/>
			      <xs:element ref="cogsGame"/>
			      <xs:element ref="storyDice"/>
			      <xs:element ref="spinnerGame"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="mediaActivityElementGroup">
		    <xs:sequence>
			      <xs:element name="media" type="mediaElementType" minOccurs="0"/>
		    </xs:sequence>
	  </xs:group>
   <xs:group name="standardActivityElementGroup">
		    <xs:sequence>
			<!-- output these above rubric in their own block -->
			      <xs:element name="metadata" type="metaDataWithSkills" minOccurs="0"/>
			      <xs:element name="activityHead" minOccurs="0">
				        <xs:complexType>
					          <xs:sequence>
						            <xs:element name="activityTitle" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="activitySubtitle" type="basicFormattingType" minOccurs="0"/>
						            <xs:element name="activityDescription"
                              type="basicFormattingTypeWithImages"
                              minOccurs="0"/>
						            <xs:element name="activityImage" type="simpleImageType" minOccurs="0"/>
					          </xs:sequence>
					          <xs:attribute name="class" type="userClassPattern" use="optional"/>
				        </xs:complexType>
			      </xs:element>
			      <xs:element name="glossary" type="glossaryType" minOccurs="0"/>
			      <xs:choice minOccurs="0" maxOccurs="unbounded">
				        <xs:element ref="rubric" minOccurs="0" maxOccurs="unbounded"/>
				        <xs:element ref="printRubric" minOccurs="0" maxOccurs="1"/>
			      </xs:choice>
			      <!--
				either: <main> or <itemBased> elements next
			-->
			      <!-- <xs:choice minOccurs="1">
				<xs:element ref="itemBased"/>
				<xs:element ref="main"/>
			</xs:choice> -->
			      <xs:sequence>
				        <xs:element ref="itemBased" minOccurs="0" maxOccurs="1"/>
				        <xs:element ref="itemListContainer" minOccurs="0" maxOccurs="1"/>
				        <xs:element ref="main" minOccurs="0" maxOccurs="1"/>
			      </xs:sequence>
		    </xs:sequence>
	  </xs:group>
   <xs:attributeGroup name="activityAttributes">
		    <xs:attribute name="lang" type="languageType" use="optional"/>
		    <xs:attribute name="numbered" type="yesNoType" use="optional"/>
		    <xs:attribute name="type">
			      <xs:annotation>
				        <xs:documentation>..... to do ....</xs:documentation>
			      </xs:annotation>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:enumeration value="critical"/>
					          <xs:enumeration value=""/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>
		    <xs:attribute name="desktopDraggable" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Makes the behaviour of the draggable items click + stick on the desktop - overrides any other settings</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="stickyWordPools" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Should the wordboxes (wordpools) in the activity be sticky positioned ?</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="wordBoxPosition" type="wordBoxPositionType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Where to place the wordbox in the activitiy for Droppables - either at the top of the first block that contains droppables  (default), the 'top' of the activity itself, or the 'bottom' of the activity</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="marked" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Marked is always assumed to be 'Y' - if set to 'N' - no scoring will take place for the activity. ***NB!*** this is to handle interactives where there are no '@correct' attributes set - eg. Categorise / Droppable / etc</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="allowAnnotations" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>
					Default (if missing) = Yes
					Will cause the annotations button to be available on infoBlocks and Activities.
				</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="class" type="userClassPattern" use="optional"/>
		    <xs:attribute name="gradable" use="optional">
			      <xs:annotation>
				        <xs:documentation>
				- closed gradable (user interactions graded by Question Management - default if attribute is missing)
				- open gradable (user interactions graded by teacher)
				- open non gradable (user interactions not graded)
				- non gradable (no user interactions)
			</xs:documentation>
			      </xs:annotation>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:enumeration value="closed-gradable"/>
					          <xs:enumeration value="open-gradable"/>
					          <xs:enumeration value="open-non-gradable"/>
					          <xs:enumeration value="non-gradable"/>
					          <xs:enumeration value="story"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>
		    <xs:attribute name="seed" type="xs:string" use="optional">
			      <xs:annotation>
				        <xs:documentation>For when random just isn't random enough - enter any string value in here to 'reseed' the random number generator used by the RCF</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>

		    <xs:attribute name="printSeed" use="optional">
			      <xs:annotation>
				        <xs:documentation>For when random in print just isn't random enough - enter any NUMERIC / INTEGER value greater than 0 and less than 1000 in here to 'reseed' the random number generator used by the RCF print generation</xs:documentation>
			      </xs:annotation>
			      <xs:simpleType>
				        <xs:restriction base="xs:nonNegativeInteger">
					          <xs:maxInclusive value="999"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>

		    <xs:attribute name="interactive" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>If interactive=n then a transparent 'mask' is placed over the activity to stop the user interacting with it - show answers / etc will still continue to work</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="pseudoID" type="xs:string" use="optional">
			      <xs:annotation>
				        <xs:documentation>The 'pseudo id' allows us to assign an internal 'meaningful' ID to the activity for tracking in other systems. Where this is not provided, an internal id of :
					{project name}_L{level}U{unit}AS{Activity Set or S{Section}AS{Activity set}}A{activity}
				will be used at build time
				</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="droppableClickStick" use="optional" default="n">
			      <xs:annotation>
				        <xs:documentation>Force all droppables (simple and complex) to be 'click+stick' in the activity</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="rippleButtons"
                    type="yesNoType"
                    use="optional"
                    default="n"/>
		    <xs:attribute name="enableMathJax"
                    type="yesNoType"
                    use="optional"
                    default="n">
			      <xs:annotation>
				        <xs:documentation>Setting to 'y' (and including math markup in the activity) will enable RCF to load the MathJax library and output mathematical equations via MathJax</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="randomizeItems" use="optional" default="none">
			      <xs:annotation>
				        <xs:documentation>
					Randomize the order of 'items' in certain interactions:
					- none: items are output in the order of the xml
					- fixed: items are randomized once at runtime with a fixed order (seed by activity id / seed attribute value)
					- always: items are randomized everytime the activity is loaded (random seed value)
				</xs:documentation>
			      </xs:annotation>
			      <xs:simpleType>
				        <xs:restriction base="xs:string">
					          <xs:enumeration value="none"/>
					          <xs:enumeration value="fixed"/>
					          <xs:enumeration value="always"/>
				        </xs:restriction>
			      </xs:simpleType>
		    </xs:attribute>
		    <xs:attribute name="sortItemsAlphabetically"
                    type="yesNoType"
                    use="optional"
                    default="n">
			      <xs:annotation>
				        <xs:documentation>Sort the subscribing items in the activity alphabetically</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:attributeGroup>
   <xs:group name="standardAnswerKeyElements">
		    <xs:choice>
			      <xs:element name="h1" type="answerKeySimpleBlockElementsType"/>
			      <xs:element name="h2" type="answerKeySimpleBlockElementsType"/>
			      <xs:element name="h3" type="answerKeySimpleBlockElementsType"/>
			      <xs:element name="h4" type="answerKeySimpleBlockElementsType"/>
			      <xs:element name="h5" type="answerKeySimpleBlockElementsType"/>
			      <xs:element name="h6" type="answerKeySimpleBlockElementsType"/>
			      <xs:element name="p" type="answerKeySimpleBlockElementsType"/>
			      <xs:group ref="multiMediaAnswerKeyElements"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="multiMediaAnswerKeyElements">
		    <xs:choice>
			      <xs:element ref="audio"/>
			      <xs:element ref="image"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="complexDroppableMarkedInlineElements">
		    <xs:choice>
			      <xs:element ref="dropDown"/>
			      <xs:element ref="radio"/>
			      <xs:element ref="checkbox"/>
			      <xs:element ref="complexDroppable"/>
			      <xs:element ref="locating"/>
			      <!-- <xs:element name="locating" type="locatingType"/> -->
			      <xs:element name="typein" type="resizableMarkableTypeInTextType"/>
			      <!-- <xs:element name="typeinGroup" type="typeinGroupType"/> -->
			      <xs:element ref="typeinGroup"/>
			      <xs:element name="collapsibleBlock" type="collapsibleType" minOccurs="0"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="flashcardMarkedBlockElements">
		    <xs:choice>
			      <xs:element ref="positioning"/>
			      <xs:element ref="ordering"/>
			      <xs:element ref="complexOrdering"/>
			      <xs:element ref="verticalCrossword"/>
			      <xs:element ref="hangman"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="interactiveTextBlockElementsSpanGroup">
		    <xs:choice>
			      <xs:element ref="sSpan" minOccurs="0"/>
			      <xs:element ref="colourText" minOccurs="0"/>
			      <xs:element ref="cSpan" minOccurs="0"/>
			      <xs:element ref="eSpan" minOccurs="0" maxOccurs="unbounded"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="interactiveTextBlockLevelElements">
		    <xs:choice>
			      <xs:element ref="prompt"/>
			      <xs:element name="collapsibleBlock"
                     type="collapsibleBlockTypeInInteractiveTextBlock"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
			      <xs:element name="block"
                     type="interactiveTextContentBlockType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <xs:element name="feedback"
                     type="feedbackType"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
			      <!-- -->
			      <xs:element name="h1" type="interactiveTextBlockElementsType"/>
			      <xs:element name="h2" type="interactiveTextBlockElementsType"/>
			      <xs:element name="h3" type="interactiveTextBlockElementsType"/>
			      <xs:element name="h4" type="interactiveTextBlockElementsType"/>
			      <xs:element name="h5" type="interactiveTextBlockElementsType"/>
			      <xs:element name="h6" type="interactiveTextBlockElementsType"/>
			      <xs:element name="p" type="interactiveTextBlockElementsType"/>
			      <xs:element name="list" type="interactiveTextListType"/>
			      <xs:element name="table" type="interactiveTextTableType"/>
			      <!-- -->
			      <xs:group ref="basicInlineElements" minOccurs="0"/>
			      <xs:element ref="eSpan" minOccurs="0"/>
			      <xs:element ref="popupLink" minOccurs="0" maxOccurs="unbounded"/>
			      <xs:group ref="markedInlineElements" minOccurs="0"/>
			      <xs:group ref="unmarkedInteractiveBlockElements" minOccurs="0"/>

		    </xs:choice>
	  </xs:group>
   <xs:attributeGroup name="wordSearchAttributes">
		    <xs:attribute name="interactive" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Is the word search grid interactive ? (default 'n')</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="gridSize" type="xs:integer" use="optional">
			      <xs:annotation>
				        <xs:documentation>Specify the size of the grid (square) - if this value is ommitted from the XML, then the longest word length (+2) is used instead</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="useDiagonal" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Use diagonal words in wordsearch - yes/no type (default to NO)</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="useVertical" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Use vertical words in the wordsearch (yes/no type) - defaults to yes</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="useReverse" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Reverse words in the wordsearch - yes/no type (default to NO)</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
		    <xs:attribute name="clickStick" type="yesNoType" use="optional" default="n">
			      <xs:annotation>
				        <xs:documentation>Override the 'draggable' behavior on desktop and always have the interaction in 'click-stick' mode</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:attributeGroup>
   <xs:attributeGroup name="fixedWordSearchAttributes">
		    <xs:attribute name="interactive" type="yesNoType" use="optional">
			      <xs:annotation>
				        <xs:documentation>Is the word search grid interactive ? (default 'n')</xs:documentation>
			      </xs:annotation>
		    </xs:attribute>
	  </xs:attributeGroup>
   <xs:group name="complexBlockElements">
		    <xs:annotation>
			      <xs:documentation>
			complexBlockElements potentially have marked children
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="h1" type="complexBlockElementsType"/>
			      <xs:element name="h2" type="complexBlockElementsType"/>
			      <xs:element name="h3" type="complexBlockElementsType"/>
			      <xs:element name="h4" type="complexBlockElementsType"/>
			      <xs:element name="h5" type="complexBlockElementsType"/>
			      <xs:element name="h6" type="complexBlockElementsType"/>
			      <xs:element name="p" type="complexBlockElementsType"/>
			      <xs:element name="list" type="complexListType"/>
			      <xs:element name="table" type="complexTableType"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="itemBasedInlineElements">
		    <xs:choice>
			      <xs:element ref="audio"/>
			      <xs:element ref="image"/>
			      <xs:element ref="imageAudio"/>
			      <xs:element ref="a"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="itemBasedSimpleBlockElements">
		    <xs:annotation>
			      <xs:documentation>
			item based simpleBlockElements have *NO* marked children
			</xs:documentation>
		    </xs:annotation>
		    <xs:choice>
			      <xs:element name="h1" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="h2" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="h3" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="h4" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="h5" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="h6" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="p" type="itemBasedSimpleBlockElementsType"/>
			      <xs:element name="list" type="basicListType"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="itemInlineInteractions">
		    <xs:choice>
			      <xs:element ref="itemCheckbox"/>
			      <xs:element ref="itemRadio"/>
			      <xs:element ref="itemDropDown"/>
			      <xs:element ref="itemTypein"/>
			      <xs:element ref="itemTypeinGroup"/>
		    </xs:choice>
	  </xs:group>
   <xs:group name="itemInteractions">
		    <xs:choice>
			      <xs:element ref="itemSelectableText"/>
			      <xs:group ref="itemInlineInteractions"/>
			      <xs:element ref="itemComplexDroppableBlock"/>
			      <xs:element ref="itemSentenceBuilder"/>
			      <xs:element ref="itemWordInsert"/>
		    </xs:choice>
	  </xs:group>
</xsd:schema>
